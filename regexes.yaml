version: '0.1.5'
update_url: 'https://raw.github.com/commenthol/ua-parser2/master/regexes.yaml'

#### Browser ####
user_agent_parsers:

  #### Bots ####
  - group:
    regex: '(bot|spider|crawl|http://|slurp|seek|google|search|dig|@|archiver|larbin|zyborg|teoma|voyager|lycos|monitor|snappy|pompos|charlotte|vortex|indexer|NING)'
    regex_flag: 'i'

    # Pingdom
    - regex: '(Pingdom.com_bot_version_)(\d+)\.(\d+)'
      family: 'PingdomBot'
      type: 'bot'
    # Facebook
    - regex: '(facebookexternalhit)/(\d+)\.(\d+)'
      family: 'FacebookBot'
      type: 'bot'
    # Google Plus
    - regex: 'Google.*/\+/web/snippet'
      family: 'GooglePlusBot'
      type: 'bot'

    # sort this regex by length !
    - regex: '(Yahoo! Slurp|Yahoo[a-z]*Seeker|Willow Internet Crawler|Googlebot(?:-[^/]*)?|Rackspace Monitoring|semanticdiscovery|A6-Indexer|baidu[a-z]*(?:spider|Mobaider)|Google SketchUp|Sogou Pic Spider|Innovazion Crawler|fast-webcrawler|Catchpoint bot|ConveraCrawler|Checklinks|ZyBorg|dataparksearch|AdsBot-Google(?:-[a-z]*)?|ThumbShotsBot|MSIECrawler|YottaaMonitor|http%20client|Read%20Later|BingPreview|HttpMonitor|LinkedInBot|Daumoa(?:-feedfetcher)?|netresearch|searchsight|PagePeeker|TwitterBot|YandexBot|altavista|charlotte|findlinks|WebThumb|Netvibes|archiver|blitzbot|mogimogi|URL2PNG|ZooShot|bingbot|openbot|scooter|gigabot|furlbot|polybot|scrubby|seekbot|[a-z_\-]*crawler|GomezA|msnbot(?:-media *)?|m65bot|msrbot|ichiro(?:/mobile)?|larbin|pompos|snappy|speedy|[a-z_\-]*spider|^vortex|^voyager|Slurp|lycos|teoma(?!bar)?|htdig|voila|^zao|\b(?:(?!CU)[a-z])+bot\b|\bYeti(?:-[a-z]*)|^NING|Riddler)(?:[ /](\d+)(?:\.(\d+))+)?'
      regex_flag: 'i'
      type: 'bot'

  ### iOS / OSX Applications
  - group:
    regex: '\b(iPhone|iPad|iPod|CFNetwork)'

    - regex: '^([^/]+)/(\d+)(?:\.(\d+))+ \((?:iPhone|iPad|iPod); iOS [0-9\.]+; Scale/[0-9\.]+\)'
      type: 'app'
    - regex: '^([^/]+)/(\d+)(?:\.(\d+))+ iOS/[0-9\.]+ model/(?:iPhone|iPad|iPod)'
      type: 'app'
    - regex: '^((?:(?! CFNetwork|/).)+)(?:/(\d+)(?:\.([a-z\d]+))*|.*)? CFNetwork/.*'
      type: 'app'
    - regex: '(CFNetwork)(?:/(\d+)(?:\.(\d+))+)?'
      family: 'CFNetwork'
      type: 'app'

  ### Mail
  - group:
    regex: '\b(Thunderbird|Icedove|Lotus-Notes|Airmail|Lightning|MSOffice|Outlook|Barca|Bat)'

    # Lightning
    - regex: '\b(Lightning)/(\d+)(?:\.(\d+)(?:\.?([ab]?\d+[a-z]*))?)?'
      type: 'mail'
    # Outlook 2007
    - regex: 'MSOffice 12'
      family: 'Outlook'
      v1: '2007'
      type: 'mail'
    # Outlook 2010
    - regex: 'MSOffice 14'
      family: 'Outlook'
      v1: '2010'
      type: 'mail'
    # Outlook 2013
    - regex: 'Microsoft Outlook 15\.\d+\.\d+'
      family: 'Outlook'
      v1: '2013'
      type: 'mail'
    # Other Main Agents
    - regex: '(Lotus-Notes|Microsoft Outlook|Outlook-Express|Barca(?:Pro)?|Postbox|The Bat!(?: Voyager)?)(?:[/ ](\d+)(?:\.(\d+))?)?'
      type: 'mail'
    # Apple Air Mail
    - regex: '(Airmail) (\d+)\.(\d+)(?:\.(\d+))?'
      type: 'mail'
    # Thunderbird
    - regex: '(Thunderbird|Icedove)/(\d+)\.(\d+)\.(\d+(?:pre)?)'
      family: 'Thunderbird'
      type: 'mail'

  - regex: '\b(AideRSS|Akregator|Apple-PubSub|FeedDa?emon|Feeddler|Feedreader|JetBrains Omea Reader|Liferea|NetNewsWire|NewsBlur|newsbeuter|Pulp|ReadKit|Reeder|(?:RSS|Rss)Bandit|RssBar|RSS Junkie|RSS Menu|RSSOwl|SimplePie|SimpleRSS|Tiny Tiny RSS|UniversalFeedParser|Wizz RSS News Reader|Windows-RSS-Platform)(?:[ /](\d+)(?:\.(\d+))?(?:\.(\d+))?)?'
    type: 'feedreader'

  # mediaplayers
  - regex: '\b(Banshee|Clementine|MediaMonkey)(?:[ /](\d+)(?:\.(\d+)(?:\.(\d)+)?)?)?'
    type: 'mediaplayer'

  - regex: '\b(Instacast|iTunes(?:-iP\w+(?:-\w+)?)?|FlyCast|Nightingale|Songbird|SubStream|vlc|Windows-Media-Player(?:-\w+)?|XBMC)\b(?:[ /]?(\d+)(?:\.(\d+)(?:\.(\d)+)?)?)?'
    type: 'mediaplayer'

  - regex: '(QuickTime)(?:(?:(?:.+qtver=)|(?:(?: E-)?[\./]))(\d+)(?:\.(\d+)(?:\.(\d)+)?)?)?'
    type: 'mediaplayer'

  #### SPECIAL CASES TOP ####

  - group:
    regex: 'Gecko|Treco'

    # Browsers using Gecko; must go before Firefox
    - regex: 'Mozilla.*\b(Beonex|Camino|Chimera|CometBird|Firebird(?: Browser)?|Fireweb Navigator|Flock|IceDragon|SailfishBrowser|SeaMonkey)/(\d+)(?:\.(\d+)(?:\.?([ab]?\d+[a-z]*))?)?'

    # Firefox
    - regex: '(Fennec)/(\d+)\.(\d+)\.?(pre|[ab]?\d+[a-z]*)'
      family: 'Firefox Mobile'
    - regex: 'Mobile.*(Firefox)/(\d+)\.(\d+)'
      family: 'Firefox Mobile'
    - regex: '\b(BonEcho|GranParadiso|Lorentz|Minefield|Namoroka|Pale[Mm]oon|Shiretoko)/(\d+)(?:\.(\d+)(?:\.?([ab]?\d+[a-z]*))?)?'
      family: 'Firefox ($1)'
    - regex: '(Firefox)/(\d+)\.(\d+)(a\d+[a-z]*)'
      family: 'Firefox Alpha'
    - regex: '(Firefox)/(\d+)\.(\d+)(b\d+[a-z]*)'
      family: 'Firefox Beta'
    - regex: '(Firefox)-(?:\d+\.\d+)?/(\d+)\.(\d+)(a\d+[a-z]*)'
      family: 'Firefox Alpha'
    - regex: '(Firefox)-(?:\d+\.\d+)?/(\d+)\.(\d+)(b\d+[a-z]*)'
      family: 'Firefox Beta'
    - regex: '(Firefox).*Tablet browser (\d+)\.(\d+)\.(\d+)'
      family: 'MicroB'
    - regex: '(MozillaDeveloperPreview)/(\d+)\.(\d+)([ab]\d+[a-z]*)?'

    # Swiftfox
    - regex: '(Firefox)/(\d+)\.(\d+)\.(\d+(?:pre)?) \(Swiftfox\)'
      family: 'Swiftfox'
    - regex: '(Firefox)/(\d+)\.(\d+)([ab]\d+[a-z]*)? \(Swiftfox\)'
      family: 'Swiftfox'

  - regex: '(MyIBrow)/(\d+)\.(\d+)'
    family: 'My Internet Browser'

  - group:
    regex: 'Opera|OPR'

    # Opera will stop at 9.80 and hide the real version in the Version string.
    # see: http://dev.opera.com/articles/view/opera-ua-string-changes/
    - regex: '(Opera Tablet).*Version/(\d+)\.(\d+)(?:\.(\d+))?'
    - regex: '(Opera)/.+Opera Mobi.+Version/(\d+)\.(\d+)'
      family: 'Opera Mobile'
    - regex: '(Opera)/(\d+)\.(\d+).+Opera Mobi'
      family: 'Opera Mobile'
    - regex: 'Opera Mobi.+(Opera)(?:\/|\s+)(\d+)\.(\d+)'
      family: 'Opera Mobile'
    - regex: 'Opera Mobi'
      family: 'Opera Mobile'
    - regex: '(Opera Mini)(?:/att)?/(\d+)\.(\d+)'
    - regex: '(Opera)/9.80.*Version/(\d+)\.(\d+)(?:\.(\d+))?'

    # Opera 14 for Android uses a WebKit render engine.
    - regex: '(?:Mobile Safari).*(OPR)/(\d+)\.(\d+)\.(\d+)'
      family: 'Opera Mobile'

    # Opera 15 for Desktop is similar to Chrome but includes an "OPR" Version string.
    - regex: '(?:Chrome).*(OPR)/(\d+)\.(\d+)\.(\d+)'
      family: 'Opera'

  # Palm WebOS looks a lot like Safari.
  - regex: '(hpw|web)OS/(\d+)\.(\d+)(?:\.(\d+))?'
    family: 'webOS Browser'

  # LuaKit has no version info.
  # ref: http://luakit.org/projects/luakit/
  - regex: '(luakit)'
    family: 'LuaKit'

  # Rekonq
  - regex: '(rekonq)(?:/(\d+)\.(\d+)\.?(\d+)? Safari)?'
    family: 'Rekonq'

  # Conkeror lowercase/uppercase
  # ref: http://conkeror.org/
  - regex: '([Cc]onkeror)/(\d+)\.(\d+)\.?(\d+)?'
    family: 'Conkeror'

  # catches lower case konqueror
  - regex: '([Kk]onqueror)/(\d+)\.(\d+)\.?(\d+)?'
    family: 'Konqueror'

  - regex: '(WeTab)-Browser'

  - regex: '(Comodo[ _]Dragon)/(\d+)\.(\d+)\.(\d+)'
    family: 'Comodo Dragon'

  - regex: '(Symphony) (\d+).(\d+)'

  - regex: '(Minimo)'

  # Yandex Browser
  - regex: '(YaBrowser)/(\d+)(?:\.(\d+)(?:\.(\d+))?)?'
    family: 'Yandex Browser'

  # Chrome Mobile
  - regex: '(CrMo)/(\d+)\.(\d+)\.(\d+)\.(\d+)'
    family: 'Chrome Mobile'
  - regex: '(CriOS)/(\d+)\.(\d+)\.(\d+)\.(\d+)'
    family: 'Chrome Mobile iOS'
  - regex: '(Chrome)/(\d+)\.(\d+)\.(\d+)\.(\d+) .*\bMobile\b'
    family: 'Chrome Mobile'

  # Chrome Frame must come before MSIE.
  - regex: '(chromeframe)/(\d+)\.(\d+)\.(\d+)'
    family: 'Chrome Frame'

  # UC Browser
  - regex: '(UC ?Browser|UCBrowser|UCWEB)[ /]?(\d+)\.(\d+)\.(\d+)'
    family: 'UC Browser'

  # Tizen Browser (second case included in browser/major.minor regex)
  - regex: '(Tizen|SLP) Browser/(\d+)\.(\d+)'
    family: 'Tizen Browser'

  # Sogou Explorer 2.X
  - regex: '(SE 2\.X) MetaSr (\d+)\.(\d+)'
    family: 'Sogou Explorer'

  # Baidu Browsers (desktop spoofs chrome & IE, explorer is mobile)
  - regex: '(baidubrowser)[/\s](\d+)'
    family: 'Baidu Browser'
  - regex: '(FlyFlow)/(\d+)\.(\d+)'
    family: 'Baidu Explorer'

  #Baidu Spark
  - regex: '((?:BD)?Spark|BIDUBrowser)[ /](\d+)(?:\.(\d+))?'
    family: 'Baidu Spark'

  # QQ Browsers
  - group:
    regex: 'QQBrowser'
    - regex: '(MQQBrowser/Mini)(?:(\d+)(?:\.(\d+)(?:\.(\d+))?)?)?'
      family: 'QQ Browser Mini'
    - regex: '(MQQBrowser)(?:/(\d+)(?:\.(\d+)(?:\.(\d+))?)?)?'
      family: 'QQ Browser Mobile'
    - regex: '(QQBrowser)(?:/(\d+)(?:\.(\d+)\.(\d+)(?:\.(\d+))?)?)?'
      family: 'QQ Browser'

  # Mail.ru Amigo/Internet Browser (Chromium-based)
  - regex: '(Chrome)/(\d+)\.(\d+)\.(\d+).* MRCHROME'
    family: 'Mail.ru Chromium Browser'

  # AOL Browser (IE-based)
  - regex: '(AOL) (\d+)\.(\d+); AOLBuild (\d+)'

  # OmniWeb
  - regex: '(OmniWeb)/v?(\d+)(?:\.(\d+)(?:\.(\d+))?)?'

  # Netscape
  - regex: '\b(Navigator|Netscape6)/(\d+)(?:\.(\d+)(?:\.?([ab]?\d+[a-z]*))?)?'
    family: 'Netscape'

  #### END SPECIAL CASES TOP ####

  #### MAIN CASES - this catches > 50% of all browsers ####

  # iOS Versions of Browsers
  - regex: '(Mercury|Puffin)/(\d{3,5})'

  # Browser/major_version.minor_version(.beta_version)
  - regex: '(Abrowser|AdobeAIR|amaya|Amiga-AWeb|AmigaVoyager|ANTFresco|ANTGalio|Arora|Bolt|BOLT|Bunjalloo|Crazy Browser|Chromium|ChromePlus|CoolNovo|Demeter|Dillo|Dolfin|Dolphin http client|Epiphany|EspialTVBrowser|Espial|Fennec|FireWeb|Fluid|Fresco|Galeon|Googlebot|Google Earth(?: EC)?|HbbTV|HotJava|IBrowse|iCab|Iceape|ICE Browser|IceCat|Iceweasel|IceWeasel|iRider|OneBrowser|Iris|Iron|Jasmine|Kapiko|Kazehakase|Kindle|K-Meleon|Lobo|Lunascape|Lynx|Maemo Browser|Maxthon|mDolphin|Mercury|MiniBrowserMobile|Midori|Minimo|Net[Ff]ront|NetFrontLifeBrowser|NetPositive|Netscape|NetSurf|OmniWeb|Opera|Opera Mini|Orca|PaleMoon|Phoenix|Planetweb|Polaris|Puffin|PyAMF|Raven for Mac|RockMelt|SailfishBrowser|SeaMonkey|Shiira|SkipStone|Skyfire|Sleipnir|Snowshoe|Space Bison|Stainless|Sunrise|ThunderBrowse|UP\.Browser|Vienna|WebPilot|WebPositive|Xiino)[/ ](\d+)(?:\.(\d+)(?:\.(\d+))?)?'

  # Chrome needs to come after as it hides a lot of browsers from previous regex
  - regex: '(Chrome)[/ ](\d+)(?:\.(\d+)(?:\.(\d+))?)?'

  - regex: '(Galeon|UP\.Browser)(?:[ /](\d+)(?:\.(\d+)(?:\.(\d+))?)?)?'

  - regex: '(Openwave)(?:/(\d+)(?:\.(\d+)(?:\.(\d+))?)?)?'
    family: 'UP.Browser'

  # Dolphin Browser
  # @ref: http://www.dolphin.com
  - regex: '\b(Dolphin)(?: |/|HDCN/|/INT\-)(\d+)\.(\d+)\.?(\d+)?'

  # @note: needs to come after "Dolfin" as part of Samsung Bada UAs
  - regex: '\b(NexPlayer)\b(?:[ /]?(\d+)(?:\.(\d+)(?:\.(\d)+)?)?)?'
    type: 'mediaplayer'

  # IE Xbox
  # @ref: http://msdn.microsoft.com/en-us/library/ie/jj883727%28v=vs.85%29.aspx
  - regex: '(MSIE) (\d+)\.(\d+).*Xbox[^\-]'
    family: 'IE Xbox'
  # IE Mobile
  - regex: '(IEMobile)[ /](\d+)\.(\d+)'
    family: 'IE Mobile'
  # desktop mode
  # http://www.anandtech.com/show/3982/windows-phone-7-review
  - regex: '(MSIE) (\d+)\.(\d+).*XBLWP7'
    family: 'IE Large Screen'

  #### END MAIN CASES ####

  #### SPECIAL CASES ####
  - regex: '(Obigo|OBIGO|Teleca)(?:InternetBrowser|\-?Browser)?(?:[^\d]*0*(\d+)(?:.(\d+))?)?'
    family: 'Obigo'

  - regex: '(MAXTHON|Maxthon) (\d+)\.(\d+)'
    family: 'Maxthon'
  - regex: '(Maxthon|MyIE2|Uzbl|Shiira)'
    v1: '0'

  - regex: '(PLAYSTATION 3.+WebKit|Nintendo 3DS|PlayStation Vita|AppleWebKit.+ NX)(?:/(\d+)\.(\d+)\.(\d+))?'
    family: 'NetFront NX'
  - regex: '(PLAYSTATION 3|PlayStation Portable)'
    family: 'NetFront'

  - regex: '(XBMC)/(\d+)\.(\d+)[-\w\s]+(r\d+)'

  - regex: '(ABrowse) (\d+)(?:\.(\d+))?'

  - regex: '(BrowseX) \((\d+)\.(\d+)\.(\d+)'

  - regex: '(NCSA[ _]Mosaic)(?:/(\d+)[\.-](\d+)(?:[\.-]?([a-z]?\d+))?)?'
    family: 'NCSA Mosaic'

  # Polaris/d.d is above
  - regex: '(POLARIS|Embider)/(\d+)\.(\d+)'
    family: 'Polaris'

  - regex: '(AvantGo) (\d+).(\d+)'

  - regex: '(Avant)'
    v1: '1'

  # This is the Tesla Model S (see similar entry in device parsers)
  - regex: '(QtCarBrowser)'
    v1: '1'

  - regex: '^(iBrowser/Mini)(\d+)\.(\d+)'
    family: 'iBrowser Mini'
  - regex: '^(iBrowser|iRAPP)/(\d+)\.(\d+)'

  - regex: '\b(IBrowse)(?:[ /](\d+)\.(\d+))?'

  # nokia browsers
  # based on: http://www.developer.nokia.com/Community/Wiki/User-Agent_headers_for_Nokia_devices
  - regex: '(NokiaBrowser|BrowserNG)/(\d+)\.(\d+)(?:\.(\d+)(?:\.(\d+))?)?'
    family: 'Nokia Browser'
  - regex: 'Symbian.*(Series60)/5\.0'
    family: 'Nokia Browser'
    v1: '7'
    v2: '0'
  - regex: '(S40OviBrowser)/(\d+)\.(\d+)(?:\.(\d+))?(?:\.(\d+))?'
    family: 'Ovi Browser'
  - regex: '(Series60)/(\d+)\.(\d+).*AppleWebKit'
    family: 'Nokia OSS Browser'
  - regex: '(Series60)/(\d+)\.(\d+)'
    family: 'Nokia Services (WAP) Browser'
  - regex: '^(Nokia)'
    family: 'Nokia Services (WAP) Browser'
  - regex: '(Series80|Series90)/(\d)\.(\d)'
    family: 'Nokia $1 Browser'

  # BlackBerry devices
  - regex: '(BB10);'
    family: 'BlackBerry WebKit'
  - regex: '(PlayBook).+RIM Tablet OS (\d+)\.(\d+)\.(\d+)'
    family: 'BlackBerry WebKit'
  - regex: '(Black[bB]erry).+Version/(\d+)\.(\d+)\.(\d+)'
    family: 'BlackBerry WebKit'
  - regex: '(Black[bB]erry)\s?(\d+)'
    family: 'BlackBerry'

  # Palm
  - regex: 'Palm.*\b(Pre|Blazer|WebPro)\b(?:[ /](\d+)(?:\.(\d+)(?:\.(\d+[a-z]*))?)?)?'
    family: 'Palm $1'

  # Links/ Elinks
  - regex: '\b(E?[Ll]inks)(?: \(|\/)(\d+)\.(\d+)\.?(\d+)?'

  - regex: '(QtWeb) Internet Browser/(\d+)\.(\d+)'

  # Amazon Silk, should go before Safari
  - regex: '(Silk)/(\d+)\.(\d+)(?:\.([0-9\-]+))?'
    family: 'Amazon Silk'

  # Phantomjs, should go before Safari
  - regex: '(PhantomJS|CocoonJS)/(\d+)(?:\.(\d+)(?:\.(\d+))?)?'
    type: 'headless'

  # AppleWebKit / WebKit Nightly
  - regex: '(AppleWebKit)/(\d+)\.?(\d+)?\+ .* Safari'
    family: 'AppleWebKit'

  # Browser major_version.minor_version (space instead of slash)
  - regex: '(Android) (\d+)\.(\d+)\.?(\d+)?'

  # iOS
  - group:
    regex: '(iPod|iPhone|iPad)'
    - regex: '(iPod|iPhone|iPad).+Version/(\d+)\.(\d+)(?:\.(\d+))?'
      family: 'Mobile Safari'
    - regex: '(iPod|iPhone|iPad);.*CPU.*OS (\d+)(?:_\d+)?_(\d+).*Mobile'
      family: 'Mobile Safari'
    - regex: '(iPod|iPhone|iPad)'
      family: 'Mobile Safari'

  # Safari
  - regex: '(Version)/(\d+)\.(\d+)(?:\.(\d+))?.*Safari/'
    family: 'Safari'
  # Safari didn't provide "Version/d.d.d" prior to 3.0
  - regex: '(Safari)/\d+'

  - regex: '(OLPC)/Update(\d+)\.(\d+)'
  - regex: '(OLPC)/Update()\.(\d+)'
    v1: '0'

  - regex: '(SEMC\-Browser)/(\d+)\.(\d+)'

  - regex: '(Phantom)/V(\d+)\.(\d+)'
    family: 'Phantom Browser'

  - regex: 'Trident(.*)rv:(\d+)\.(\d+)'
    family: 'IE'

  # AFTER THE EDGE CASES ABOVE!
  # AFTER IE11
  # BEFORE all other IE
  - regex: '(Firefox)/(\d+)(?:\.(\d+)(?:\.?(pre|[ab]?\d+[a-z]*))?)?'

  # Internet Explorer
  - regex: '(?:MS)?(IE)[ /](\d+)\.(\d+)'

  - regex: '(python-requests|(?:lib)?curl)(?:/(\d+)\.(\d+)(?:\.(\d+))?)?'
    type: 'headless'

  - regex: '(?:^|[ ;])(Java)[ /]?(\d+)(?:\.(\d+)(?:\.(\d+))?)?'
    type: 'headless'


#### Engine ####
engine_parsers:

  # MSIE compatibility modes
  - group:
    regex: 'Trident'

    # MSIE 8 !== Trident/4
    - regex: 'MSIE ([^8])\.\d.* (Trident)[ /](4)\.(\d+)\.?(\d+)?'
      family: '$2'
      v1: '$3'
      v2: '$4'
      v4: '$5'
      type: 'mode::MSIE $1'
    # MSIE 9 !== Trident/5
    - regex: 'MSIE ([^9])\.\d.* (Trident)[ /](5)\.(\d+)\.?(\d+)?'
      family: '$2'
      v1: '$3'
      v2: '$4'
      v4: '$5'
      type: 'mode::MSIE $1'
    # MSIE 10 !== Trident/6
    - regex: 'MSIE ((?:(?!10)\d)+)\.\d.* (Trident)[ /](6)\.(\d+)\.?(\d+)?'
      family: '$2'
      v1: '$3'
      v2: '$4'
      v4: '$5'
      type: 'mode::MSIE $1'
    # MSIE 11 !== Trident/7
    - regex: 'MSIE ((?:(?!11)\d)+)\.\d.* (Trident)[ /](7)\.(\d+)\.?(\d+)?'
      family: '$2'
      v1: '$3'
      v2: '$4'
      v4: '$5'
      type: 'mode::MSIE $1'

  - regex: '(Trident|Presto)[ /](\d+)\.(\d+)\.?(\d+)?'

  - regex: '(Chrome)[/](\d+)\.(\d+)\.?(\d+)?\.?(\d+)?.*OPR/\d+'
    family: 'Chrome::Opera'

  - regex: '^Mozilla.*(?:Android\b.*SAMSUNG|SMART-TV).*(Chrome)[/](\d+)\.(\d+)\.?(\d+)?\.?(\d+)??'
    family: 'Chrome::Samsung'

  - regex: '(Chrome)[/](\d+)\.(\d+)\.?(\d+)?\.?(\d+)?'

  - regex: '(Silk)/(\d+)\.(\d+)'

  - regex: 'Web[Kk]it.*(NokiaBrowser|BrowserNG)/(\d+)\.?(\d+)?\.?(\d+)?'
    family: 'Webkit::Nokia'

  - regex: '^Mozilla.*Android\b.*SAMSUNG.*(AppleWeb[Kk]it)/?(\d+)\.?(\d+)?'
    family: 'Webkit::Samsung'

  - regex: 'Android\b.*(AppleWeb[Kk]it)/?(\d+)\.?(\d+)?'
    family: 'Webkit::Android'

  - regex: '(?:DirectFB)\b.*(AppleWeb[Kk]it)/?(\d+)\.?(\d+)?'
    family: 'Webkit::LG'
  - regex: '(AppleWeb[Kk]it)/?(\d+)\.?(\d+)?.*\bNetCast'
    family: 'Webkit::LG'

  - regex: 'Smart-?TV\b.*(AppleWeb[Kk]it)/?(\d+)\.?(\d+)?'
    family: 'Webkit::Samsung'

  - regex: '(rv:)(\d+)\.(\d+[ab]?)\.?([ab]?\d+[a-z]*)?\.?(\d+[a-z]*)?[;\)].* Gecko(?:[ /]|$)'
    family: 'Gecko'

  - regex: '(AppleWeb[Kk]it)(?:/(\d+)\.?(\d+)?\.?(\d+)?|[ ,]|$)'
    family: 'Webkit::Apple'

  - regex: '(Web[Kk]it)(?:/(\d+)\.?(\d+)?\.?(\d+)?|[ ,]|$)'
    family: 'Webkit'

  - regex: '(Net[Ff]ront)[ /]?(\d+)\.(\d+)'
    family: 'Netfront'

  - regex: '(Gecko)/20\d{6}'

#### OS ####
os_parsers:

  - group:
    regex: 'UCWEB|JUC'
    # UCWEB
    - regex: '^UCWEB.*; (Adr) (\d+)\.(\d+)(?:[.\-]([a-z0-9]+))?;'
      family: 'Android'
    - regex: '^UCWEB.*; (iPad OS|iPh OS) (\d+)_(\d+)(?:_(\d+))?;'
      family: 'iOS'
    - regex: '^UCWEB.*; (wds) (\d+)\.(\d+)(?:\.(\d+))?;'
      family: 'Windows Phone'
    # JUC
    - regex: '^(JUC).*; ?U; ?(?:Android)?(\d+)\.(\d+)(?:[\.\-]([a-z0-9]+))?'
      family: 'Android'
  ##########
  # Windows
  # http://en.wikipedia.org/wiki/Windows_NT#Releases
  # possibility of false positive when different marketing names share same NT kernel
  # e.g. windows server 2003 and windows xp
  # lots of ua strings have Windows NT 4.1 !?!?!?!? !?!? !? !????!?! !!! ??? !?!?! ?
  # (very) roughly ordered in terms of frequency of occurence of regex (win xp currently most frequent, etc)
  ##########
  - group:
    regex: 'Win|CYGWIN'
    # @note: Xbox also spoofs NT 6.1/Windows Phone (see http://msdn.microsoft.com/en-us/library/ie/jj883728(v=vs.85).aspx)
    # @note: Xbox spoofs "Xbox LIVE/2.5.1704 CFNetwork/672.0.8 Darwin/14.0.0" iPhone App
    - regex: '\b(Xbox)\b(?:(?!Darwin).)*$'
    # ie mobile desktop mode
    # spoofs nt 6.1. must come before windows 7
    - regex: '(XBLWP7)'
      family: 'Windows Phone'

    # @note: These need to come before Windows NT 6.1
    - regex: '(Windows Phone) (?:OS[ /])?(\d+)\.(\d+)'
    - regex: '(Windows ?Mobile)'
      family: 'Windows Mobile'

    - regex: '(Windows ?CE)'
      family: 'Windows CE'

    - regex: '(Windows NT 6\.3; ARM;)'
      family: 'Windows RT 8.1'
    - regex: '(Windows NT 6\.3|CYGWIN_NT-6\.3|Windows 8.1)'
      family: 'Windows 8.1'

    - regex: '(Windows NT 6\.2; ARM;)'
      family: 'Windows RT'
    - regex: '(Windows NT 6\.2|CYGWIN_NT-6\.2|Windows 8)'
      family: 'Windows 8'

    - regex: '(Windows NT 6\.1|CYGWIN_NT-6\.1|Windows 7)'
      family: 'Windows 7'

    - regex: '(Windows NT 6\.0|CYGWIN_NT-6\.0|Windows Vista)'
      family: 'Windows Vista'

    - regex: '(Windows NT 5\.2|CYGWIN_NT-5\.2|Windows Server 2003)'
      family: 'Windows Server 2003'

    - regex: '(Windows NT 5\.1|CYGWIN_NT-5\.1|Windows XP)'
      family: 'Windows XP'

    - regex: '(Windows NT 5\.0|CYGWIN_NT-5\.0|Win ?2000|Windows 2000)'
      family: 'Windows 2000'

    - regex: '(Windows NT 4\.0|CYGWIN_NT-4\.0|Win ?NT|Windows NT)'
      family: 'Windows NT'

    - regex: '(Win 9x 4\.90|CYGWIN_ME-4\.90|Win ?ME|Windows ME)'
      family: 'Windows ME'

    - regex: '(Win ?98|CYGWIN_98-4\.10|Windows 98)'
      family: 'Windows 98'

    - regex: '(Win32|Win ?95|CYGWIN_95-4\.0|Windows[ _]95)'
      family: 'Windows 95'

    - regex: '(Win16|Win ?3.\1|Windows 3\.1)'
      family: 'Windows 3.1'

    - regex: '(Windows)'

  - group:
    regex: '(?:Ali)?(YunOS)'
    regex_flag: 'i'
    # YunOS spoofs Android
    - regex: '(Android) (\d+)(?:\.(\d+)(?:\.(\d+)(?:\.(\d+))?)?)?.*(?:Ali)?(YunOS)-'
      regex_flag: 'i'
      family: 'YunOS'
    - regex: '(?:Ali)?(YunOS)[ /\-](\d+)(?:\.(\d+)(?:\.(\d+)(?:\.(\d+))?)?)?'
      regex_flag: 'i'
      family: 'YunOS'

  ##########
  # Android
  # can actually detect rooted android os. do we care?
  ##########
  - regex: '(Android)[ \-/](\d+)\.(\d+)(?:[.\-]([a-z0-9]+))?'

  - group:
    regex: 'Android'
    - regex: '(Android) Donut'
      v1: '1'
      v2: '2'
    - regex: '(Android) Eclair'
      v1: '2'
      v2: '1'
    - regex: '(Android) Froyo'
      v1: '2'
      v2: '2'
    - regex: '(Android) Gingerbread'
      v1: '2'
      v2: '3'
    - regex: '(Android) Honeycomb'
      v1: '3'


  ##########
  # Kindle Android
  ##########
  - regex: '(Silk-Accelerated=[a-z]{4,5})'
    family: 'Android'

  # AmigaOS
  - regex: '(AmigaO[Ss]|AmigaVoyager|Amiga-AWeb)(?: ?(\d+)(?:\.(\d+))?)?'
    family: 'AmigaOS'

  ##########
  # Tizen OS from Samsung
  ##########
  - regex: '\b(Tizen)(?:[ /](\d+)\.(\d+))?'

  ##########
  # Mac OS
  # @ref: http://en.wikipedia.org/wiki/Mac_OS_X#Versions
  # @ref: http://www.puredarwin.org/curious/versions
  # @ref: http://user-agents.me/cfnetwork-version-list
  ##########
  - group:
    regex: 'Mac OS|Darwin'
    - regex: '(Mac OS X) (\d+)[_.](\d+)(?:[_.](\d+))?'
    # Leopard
    - regex: ' (Dar)(win)/(9).(\d+).*\((?:i386|x86_64|Power Macintosh)\)'
      family: 'Mac OS X'
      v1: '10'
      v2: '5'
    # Snow Leopard
    - regex: ' (Dar)(win)/(10).(\d+).*\((?:i386|x86_64)\)'
      family: 'Mac OS X'
      v1: '10'
      v2: '6'
    # Lion
    - regex: ' (Dar)(win)/(11).(\d+).*\((?:i386|x86_64)\)'
      family: 'Mac OS X'
      v1: '10'
      v2: '7'
    # Mountain Lion
    - regex: ' (Dar)(win)/(12).(\d+).*\((?:i386|x86_64)\)'
      family: 'Mac OS X'
      v1: '10'
      v2: '8'
    # Mavericks
    - regex: ' (Dar)(win)/(13)\.0\.2.*\((?:i386|x86_64)\)'
      family: 'Mac OS X'
      v1: '10'
      v2: '9'
      v3: '1'
    - regex: ' (Dar)(win)/(13)\.1\.0.*\((?:i386|x86_64)\)'
      family: 'Mac OS X'
      v1: '10'
      v2: '9'
      v3: '2'
    - regex: ' (Dar)(win)/(13)\.2\.0.*\((?:i386|x86_64)\)'
      family: 'Mac OS X'
      v1: '10'
      v2: '9'
      v3: '3'
    - regex: ' (Dar)(win)/(13)\.3\.0.*\((?:i386|x86_64)\)'
      family: 'Mac OS X'
      v1: '10'
      v2: '9'
      v3: '4'
    - regex: ' (Dar)(win)/(13).(\d+).*\((?:i386|x86_64)\)'
      family: 'Mac OS X'
      v1: '10'
      v2: '9'

    # builds before tiger don't seem to specify version?

    # ios devices spoof (mac os x), so including intel/ppc prefixes
    - regex: '(?:PPC|Intel) (Mac OS X)'

  # IE on Mac doesn't specify version number
  - regex: 'Mac_PowerPC'
    family: 'Mac OS'

  ##########
  # iOS
  # http://en.wikipedia.org/wiki/IOS_version_history
  ##########
  - group:
    regex: 'CPU OS|iPhone|iPad|iPod|iOS|AppleTV|CFNetwork'
    - regex: '(CPU OS|iPhone OS|CPU iPhone) +(\d+)[_\.](\d+)(?:[_\.](\d+))?'
      family: 'iOS'

    # remaining cases are mostly only opera uas, so catch opera as to not catch iphone spoofs
    - regex: '(iPhone|iPad|iPod); Opera'
      family: 'iOS'

    # few more stragglers
    - regex: '(iPhone|iPad|iPod).*Mac OS X.*Version/(\d+)\.(\d+)'
      family: 'iOS'

    - regex: '(AppleTV)/(\d+)\.(\d+)'
      family: 'ATV OS X'

    ##########
    # CFNetwork/Darwin - The specific CFNetwork or Darwin version determines whether the os maps to Mac OS, or iOS, or just Darwin.
    # @ref: https://en.wikipedia.org/wiki/Darwin_(operating_system)#Release_history
    # @ref: http://user-agents.me/cfnetwork-version-list
    ##########
    - regex: '(CFNetwork)/(4)85\.1(3)\.9'
      family: 'iOS'
    - regex: '(CFNetwork)/(5)48\.0\.3.* Darwin/11\.0\.0'
      family: 'iOS'
    - regex: '(CFNetwork)/(5)48\.(0)\.4.* Darwin/(1)1\.0\.0'
      family: 'iOS'
    - regex: '(CFNetwork)/(5)48\.(1)\.4'
      family: 'iOS'
    - regex: '(CFNetwork)/(6)09\.(1)\.4'
      family: 'iOS'
    - regex: '(CFNetwork)/(6)(0)9'
      family: 'iOS'
    - regex: '(CFNetwork)/6(7)2\.(1)\.13'
      family: 'iOS'
    - regex: '(CFNetwork)/6(7)2\.(1)\.(1)4'
      family: 'iOS'
    - regex: '(CF)(Network)/6(7)(2)\.1\.15'
      family: 'iOS'
      v1: '7'
      v2: '1'
    - regex: '(CFNetwork)/6(7)2\.(0)\.(?:2|8)'
      family: 'iOS'
    - regex: '(CFNetwork)/709\.1'
      family: 'iOS'
      v1: '8'
      v2: '0.b5'
    - regex: 'CFNetwork/.* Darwin/(9)\.\d+'
      family: 'iOS'
      v1: '1'
    - regex: 'CFNetwork/.* Darwin/(10)\.\d+'
      family: 'iOS'
      v1: '4'
    - regex: 'CFNetwork/.* Darwin/(11)\.\d+'
      family: 'iOS'
      v1: '5'
    - regex: 'CFNetwork/.* Darwin/(13)\.\d+'
      family: 'iOS'
      v1: '6'
    - regex: 'CFNetwork/6.* Darwin/(14)\.\d+'
      family: 'iOS'
      v1: '7'
    - regex: 'CFNetwork/7.* Darwin/(14)\.\d+'
      family: 'iOS'
      v1: '8'
      v2: '0'
    # iOS Apps
    - regex: '\b(iOS[ /]|iPhone(?:/| v|[ _]OS[/,]|; | OS : |\d,\d/|\d,\d; )|iPad/)(\d{1,2})[_\.](\d{1,2})(?:[_\.](\d+))?'
      family: 'iOS'

  ##########
  # Chrome OS
  # if version 0.0.0, probably this stuff:
  # http://code.google.com/p/chromium-os/issues/detail?id=11573
  # http://code.google.com/p/chromium-os/issues/detail?id=13790
  ##########
  - regex: '(CrOS) [a-z0-9_]+ (\d+)\.(\d+)(?:\.(\d+))?'
    family: 'Chrome OS'


  ##########
  # Symbian + Symbian OS
  # http://en.wikipedia.org/wiki/History_of_Symbian
  ##########
  - group:
    regex: 'Symbian|Series|MeeGo|S60'
    - regex: '(Symbian[Oo][Ss])[/ ](\d+)\.(\d+)'
      family: 'Symbian OS'
    - regex: '(Symbian/3).+NokiaBrowser/7\.3'
      family: 'Symbian^3 Anna'
    - regex: '(Symbian/3).+NokiaBrowser/7\.4'
      family: 'Symbian^3 Belle'
    - regex: '(Symbian/3)'
      family: 'Symbian^3'
    - regex: '\b(Series 60|SymbOS|S60Version|S60V\d|S60\b)'
      family: 'Symbian OS'
    - regex: '(MeeGo)'
    - regex: 'Symbian [Oo][Ss]'
      family: 'Symbian OS'
    - regex: 'Series40;'
      family: 'Nokia Series 40'
    - regex: 'Series30Plus;'
      family: 'Nokia Series 30 Plus'

  ##########
  # BlackBerry devices
  ##########
  - group:
    regex: 'BB10|BlackBerry|Rim'
    regex_flag: 'i'
    - regex: '(BB10);.+Version/(\d+)\.(\d+)\.(\d+)'
      family: 'BlackBerry OS'
    - regex: '(Black[Bb]erry)[0-9a-z]+/(\d+)\.(\d+)\.(\d+)(?:\.(\d+))?'
      family: 'BlackBerry OS'
    - regex: '(Black[Bb]erry).+Version/(\d+)\.(\d+)\.(\d+)(?:\.(\d+))?'
      family: 'BlackBerry OS'
    - regex: '(RIM Tablet OS) (\d+)\.(\d+)\.(\d+)'
      family: 'BlackBerry Tablet OS'
    - regex: '(Play[Bb]ook)'
      family: 'BlackBerry Tablet OS'
    - regex: '(Black[Bb]erry)'
      family: 'BlackBerry OS'

  ##########
  # Firefox OS
  ##########
  - regex: '\((Mobile|Tablet);.+Firefox/\d+\.\d+'
    family: 'Firefox OS'

  ##########
  # BREW
  # yes, Brew is lower-cased for Brew MP
  ##########
  - group:
    regex: 'BREW|BMP|Brew'
    - regex: '(BREW)[ /](\d+)\.(\d+)\.(\d+)'
    - regex: '(BREW);'
    - regex: '(Brew MP|BMP)[ /](\d+)\.(\d+)\.(\d+)'
      family: 'Brew MP'
    - regex: 'BMP;'
      family: 'Brew MP'

  ##########
  # Google TV
  ##########
  - regex: '(GoogleTV)(?: (\d+)\.(\d+)(?:\.(\d+))?|/[\da-z]+)'

  - regex: '(WebTV)/(\d+).(\d+)'

  ##########
  # Misc mobile
  ##########
  - regex: '(hpw|web)OS[ /](\d+)\.(\d+)(?:\.(\d+))?'
    family: 'webOS'
  - regex: '(Palm ?OS)'
    family: 'PalmOS'
  - regex: 'Xiino(?:.*v\. (\d+[\.\d]+))?'
    family: 'PalmOS'
  - regex: '(VRE);'

  ##########
  # HbbTV vendors
  ##########
  - group:
    regex: 'HbbTV'
    - regex: 'HbbTV/\d+\.\d+\.\d+ \( ;(LG)E ;NetCast 4.0'
      v1: '2013'
    - regex: 'HbbTV/\d+\.\d+\.\d+ \( ;(LG)E ;NetCast 3.0'
      v1: '2012'
    - regex: 'HbbTV/1.1.1 \(;;;;;\) Maple_2011'
      family: 'Samsung'
      v1: '2011'
    - regex: 'HbbTV/\d+\.\d+\.\d+ \(;(Samsung);SmartTV([0-9]{4});.*FXPDEUC'
      v2: 'UE40F7000'
    - regex: 'HbbTV/\d+\.\d+\.\d+ \(;(Samsung);SmartTV([0-9]{4});.*MST12DEUC'
      v2: 'UE32F4500'
    - regex: 'HbbTV/1.1.1 \(; (Philips);.*NETTV/4'
      v1: '2013'
    - regex: 'HbbTV/1.1.1 \(; (Philips);.*NETTV/3'
      v1: '2012'
    - regex: 'HbbTV/1.1.1 \(; (Philips);.*NETTV/2'
      v1: '2011'
    # the HbbTV emulator developers use HbbTV/1.1.1 (;;;;;) firetv-firefox-plugin 1.1.20
    - regex: 'HbbTV/\d+\.\d+\.\d+.*(firetv)-firefox-plugin (\d+).(\d+).(\d+)'
      family: 'FireHbbTV'
    # generic HbbTV, hoping to catch manufacturer name (always after 2nd comma) and the first string that looks like a 2011-2019 year
    - regex: 'HbbTV/\d+\.\d+\.\d+ \(.*; ?([a-zA-Z]+) ?;.*(201[1-9]).*\)'

  # Other OS
  - regex: '\b(Sailfish|Haiku|BeOS)\b'

  # RISC OS
  - regex: '(RISC OS)(?:-NC)?(?:[ /](?:\.(\d+)(?:\.(\d+))?)?)?'

  # Gaming Console
  - regex: '(Nintendo Wii)'
  - regex: '(Xbox|KIN\.(?:One|Two))'
    name: 'Xbox'
    v1: '360'

  - regex: 'PlayStation (\d+)'
    regex_flag: 'i'
    family: 'Playstation $1'
  # Mobile Gaming Console
  - regex: '(Nitro|Nintendo) ([3]?DS[i]?)'
    family: 'Nintendo Mobile'
  - regex: 'PlayStation (Portable|Vita)'
    family: 'PlayStation $1'

  ##########
  # Linux distros and others
  ##########
  - regex: '(Fedora|Ubuntu|Red Hat|(?:Free|Open|Net|\b)BSD|[KLX]?ubuntu|Arch ?Linux|Bada|CentOS|Debian|Fedora|Gentoo|HopenOS|Kindle|Knoppix|Mageia|Mandriva|Mint|openSUSE|PCLinuxOS|Puppy|Sabayon|Slackware|SUSE|BackTrack|SunOS|Solaris|AIX|HP-UX|DragonFly|Syllable|IRIX)\b(?:(?: Enterprise)? Linux)?(?:[ /\-](\d+)(?:\.(\d+)(?:\.(\d+)(?:\.(\d+))?)?)?)?'

  - regex: 'OSF1(?:[/ ]?v?(\d+)(?:\.(\d)+)?)?'
    family: 'OSF1'

  # just os
  - regex: '(Windows|Android|WeTab|Maemo|\bOS/2\b|WinGogi|GOGI)'

  # Gentoo Linux + Kernel Version
  - regex: '(Linux)[ /](\d+)\.(\d+)(?:\.(\d+))?.*gentoo'
    family: 'Gentoo'

  # Linux + Kernel Version
  - regex: '(Linux)(?:[ /](\d+)\.(\d+)(?:\.(\d+))?)?'

#### Device ####
device_parsers:

  ######################################################################
  # Android parsers
  #
  # @ref: https://support.google.com/googleplay/answer/1727131?hl=en
  ######################################################################
  - group:
    regex: '[Aa]ndroid| Build| Adr |JUC|\bHTC|Linux|Archos'

    #########
    # WebBrowser for SmartWatch
    # @ref: https://play.google.com/store/apps/details?id=se.vaggan.webbrowser&hl=en
    #########
    - regex: '\bSmartWatch *\( *([^;]+) *; *([^;]+) *;'
      device: '$1 $2'
      brand: '$1'
      model: '$2'

    # Android Application
    - group:
      regex: 'Android Application'
      - regex: 'Android Application[^\-]+ - (Sony) ?(Ericsson)? (.+) \w+ - '
        device: '$1 $2'
        brand: '$1$2'
        model: '$3'
      - regex: 'Android Application[^\-]+ - (?:HTC|HUAWEI|LGE|LENOVO|MEDION|TCT) (HTC|HUAWEI|LG|LENOVO|MEDION|ALCATEL)[ _\-](.+) \w+ - '
        regex_flag: 'i'
        device: '$1 $2'
        brand: '$1'
        model: '$2'
      - regex: 'Android Application[^\-]+ - ([^ ]+) (.+) \w+ - '
        device: '$1 $2'
        brand: '$1'
        model: '$2'

    #########
    # Huawei
    # @ref: http://www.huaweidevice.com
    # @note: Needs to be before HTC due to Desire HD Build on U8815
    #########
    - group:
      regex: 'huawei|[uc]\d{4}|ideos|ascend|m8\d{2}|s7'
      regex_flag: 'i'
      - regex: '; *(HUAWEI |Huawei-)?([UY][^;/]+) Build/(?:Huawei|HUAWEI)([UY][^\);]+)\)'
        device: '$1$2'
        brand: 'Huawei'
        model: '$2'
      - regex: '; *([^;/]+) Build[/ ]Huawei(MT1-U06|[A-Z]+\d+[^\);]+)[^\);]*\)'
        device: '$1'
        brand: 'Huawei'
        model: '$2'
      - regex: '; *(S7|M860) Build'
        device: '$1'
        brand: 'Huawei'
        model: '$1'
      - regex: '; *((?:HUAWEI|Huawei)[ \-]?)(MediaPad) Build'
        device: '$1$2'
        brand: 'Huawei'
        model: '$2'
      - regex: '; *((?:HUAWEI[ _]?|Huawei[ _])?Ascend[ _])([^;/]+) Build'
        device: '$1$2'
        brand: 'Huawei'
        model: '$2'
      - regex: '; *((?:HUAWEI|Huawei)[ _\-]?)((?:G700-|MT-)[^;/]+) Build'
        device: '$1$2'
        brand: 'Huawei'
        model: '$2'
      - regex: '; *((?:HUAWEI|Huawei)[ _\-]?)([^;/]+) Build'
        device: '$1$2'
        brand: 'Huawei'
        model: '$2'
      - regex: '; *(MediaPad[^;]+|SpringBoard) Build/Huawei'
        device: '$1'
        brand: 'Huawei'
        model: '$1'
      - regex: '; *([^;]+) Build/Huawei'
        device: '$1'
        brand: 'Huawei'
        model: '$1'
      - regex: '; *([Uu])([89]\d{3}) Build'
        device: '$1$2'
        brand: 'Huawei'
        model: 'U$2'
      - regex: '; *(?:Ideos |IDEOS )(S7) Build'
        device: 'Huawei Ideos$1'
        brand: 'Huawei'
        model: 'Ideos$1'
      - regex: '; *(?:Ideos |IDEOS )([^;/]+\s*|\s*)Build'
        device: 'Huawei Ideos$1'
        brand: 'Huawei'
        model: 'Ideos$1'

    - regex: '; *(Orange Daytona|Pulse|Pulse Mini|Vodafone 858|C8500|C8600|C8650|C8660) Build'
      device: 'Huawei $1'
      brand: 'Huawei'
      model: '$1'

    #########
    # Samsung Android Devices
    # @ref: http://www.samsung.com/us/mobile/cell-phones/all-products
    #########
    - group:
      regex: 'samsung|behold|ek-|galaxy|gt-|nexus|sch-|scl|sgh-|shv-|shw-|sm-|sph-|yp-'
      regex_flag: 'i'
      - regex: '; *(SAMSUNG |Samsung )?((?:Galaxy (?:Note II|S\d)|GT-I9082|GT-I9205|GT-N7\d{3}|SM-N9005)[^;/]*)\/?[^;/]* Build/'
        device: '$1$2'
        brand: 'Samsung'
        model: '$2'
      - regex: '; *(Google )?(Nexus [Ss](?: 4G)?) Build/'
        device: '$1$2'
        brand: 'Samsung'
        model: '$2'
      - regex: '; *(SAMSUNG |Samsung )([^\/]*)\/[^ ]* Build/'
        device: '$1$2'
        brand: 'Samsung'
        model: '$2'
      - regex: '; *(Galaxy(?: Ace| Nexus| S ?II+|Nexus S| with MCR 1.2| Mini Plus 4G)?) Build/'
        device: '$1'
        brand: 'Samsung'
        model: '$1'
      - regex: '; *(SAMSUNG[ _\-] *)+([^;/]+) Build'
        device: '$1$2'
        brand: 'Samsung'
        model: '$2'
      - regex: '; *(SAMSUNG-)?(GT\-[BINPS]\d{4}[^\/]*)(\/[^ ]*) Build'
        device: '$1$2$3'
        brand: 'Samsung'
        model: '$2'
      - regex: '(?:; *|^)((?:GT\-[BIiNPS]\d{4}|I9\d{2}0[A-Za-z\+]?\b)(?:(?! +Build| Linux| MIUI|[;/\)]).)*);?(?: +Build| Linux| MIUI|[;/\)])'
        device: '$1'
        brand: 'Samsung'
        model: '$1'
      - regex: '; (SAMSUNG-)([A-Za-z0-9\-]+).* Build/'
        device: '$1$2'
        brand: 'Samsung'
        model: '$2'
      - regex: '; *((?:SCH|SGH|SHV|SHW|SPH|SC|SM)\-[A-Za-z0-9 ]+)(/?[^ ]*)? Build'
        device: '$1'
        brand: 'Samsung'
        model: '$1'
      - regex: ' ((?:SCH)\-[A-Za-z0-9 ]+)(/?[^ ]*)? Build'
        device: '$1'
        brand: 'Samsung'
        model: '$1'
      - regex: '; *(Behold ?(?:2|II)|YP\-G[^;/]+|SCL21|I9300) Build'
        device: 'Samsung $1'
        device: 'Samsung $1'
        brand: 'Samsung'
        model: '$1'
      - regex: '; *(EK-GC\d{3}) Build'
        device: 'Samsung $1'
        brand: 'Samsung'
        model: '$1'
        type: 'camera'

    #########
    # 3Q
    # @ref: http://www.3q-int.com/
    #########
    - regex: '; *([BLRQ]C\d{4}[A-Z]+) +Build/'
      device: '3Q $1'
      brand: '3Q'
      model: '$1'
    - regex: '; *(?:3Q_)([^;/]+) +Build'
      device: '3Q $1'
      brand: '3Q'
      model: '$1'

    #########
    # Acer
    # @ref: http://us.acer.com/ac/en/US/content/group/tablets
    #########
    - group:
      regex: 'acer|[abesvwz]\d{3}|a1-|b1-|liquid|slider'
      regex_flag: 'i'
      - regex: 'Android [34].*; *(A100|A101|A110|A200|A210|A211|A500|A501|A510|A511|A700(?: Lite| 3G)?|A701|B1-A71|A1-\d{3}|B1-\d{3}) Build'
        device: '$1'
        brand: 'Acer'
        model: '$1'
        type: 'tablet'
      - regex: '; *([A-Z]\d{3}) Build.*Acer'
        device: '$1'
        brand: 'Acer'
        model: '$1'
      - regex: 'Android [34].*; *(V360|V370|W500|W500P|W501|W501P|W510|W511|W700|Slider SL101|DA22[^;/]+) Build'
        device: '$1'
        brand: 'Acer'
        model: '$1'
      - regex: '(Acer)(?:[ _-]|\/acer; )?([^;\)]+)(?: Build|;)'
        device: '$1 $2'
        brand: 'Acer'
        model: '$2'
      - regex: '; *Acer (Iconia Tab) ([^;/]+) Build'
        device: '$2'
        brand: 'Acer'
        model: '$2'
        type: 'tablet'
      - regex: '; *(Z1[1235]0|E320[^/]*|S500|S510|Liquid[^;/]*|Iconia A\d+) Build'
        device: '$1'
        brand: 'Acer'
        model: '$1'
      - regex: '; *(Acer |ACER )([^;/]+) Build'
        device: '$1$2'
        brand: 'Acer'
        model: '$2'

    #########
    # Advent
    # @ref: https://en.wikipedia.org/wiki/Advent_Vega
    # @note: VegaBean and VegaComb (names derived from jellybean, honeycomb) are
    #   custom ROM builds for Vega
    #########
    - regex: '; *(Advent )?(Vega(?:Bean|Comb)?).* Build'
      device: '$1$2'
      brand: 'Advent'
      model: '$2'

    #########
    # Ainol
    # @ref: http://www.ainol.com/plugin.php?identifier=ainol&module=product
    #########
    - regex: '; *(Ainol )?((?:NOVO|[Nn]ovo)[^;/]+) Build'
      device: '$1$2'
      brand: 'Ainol'
      model: '$2'

    #########
    # Airis
    # @ref: http://airis.es/Tienda/Default.aspx?idG=001
    #########
    - regex: '; *AIRIS[ _\-]?([^/;\)]+) *(?:;|\)|Build)'
      regex_flag: 'i'
      device: '$1'
      brand: 'Airis'
      model: '$1'
    - regex: '; *(OnePAD[^;/]+) Build'
      regex_flag: 'i'
      device: '$1'
      brand: 'Airis'
      model: '$1'

    #########
    # Airpad
    # @ref: ??
    #########
    - regex: '; *Airpad[ \-]([^;/]+) Build'
      device: 'Airpad $1'
      brand: 'Airpad'
      model: '$1'

    #########
    # Alcatel - TCT
    # @ref: http://www.alcatelonetouch.com/global-en/products/smartphones.html
    #########
    - regex: '; *(one ?touch) (EVO7|T10|T20) Build'
      device: 'Alcatel One Touch $2'
      brand: 'Alcatel'
      model: 'One Touch $2'
    - regex: '; *(?:USCC[_\-]ALCATEL[_\-]|alcatel[ _])?(?:(?:one[ _\-]?touch[ _\-])|ot[ _\-])([^;/]+);?(?: Build|\))'
      regex_flag: 'i'
      device: 'Alcatel One Touch $1'
      brand: 'Alcatel'
      model: 'One Touch $1'
    - regex: '; *(TCL)[ _]([^;/]+) Build'
      device: '$1 $2'
      brand: '$1'
      model: '$2'
    # operator specific models
    - regex: '; *(Vodafone Smart II|Optimus_Madrid) Build'
      device: 'Alcatel $1'
      brand: 'Alcatel'
      model: '$1'
    - regex: '; *BASE_Lutea_3 Build'
      device: 'Alcatel One Touch 998'
      brand: 'Alcatel'
      model: 'One Touch 998'
    - regex: '; *BASE_Varia Build'
      device: 'Alcatel One Touch 918D'
      brand: 'Alcatel'
      model: 'One Touch 918D'

    #########
    # Allfine
    # @ref: http://www.myallfine.com/Products.asp
    #########
    - regex: '; *((?:FINE|Fine)\d[^;/]+) Build'
      device: '$1'
      brand: 'Allfine'
      model: '$1'

    #########
    # Allview
    # @ref: http://www.allview.ro/produse/droseries/lista-tablete-pc/
    #########
    - regex: '; *(ALLVIEW[ _]?|Allview[ _]?)((?:Speed|SPEED).*) Build/'
      device: '$1$2'
      brand: 'Allview'
      model: '$2'
    - regex: '; *(ALLVIEW[ _]?|Allview[ _]?)?(AX1_Shine|AX2_Frenzy) Build'
      device: '$1$2'
      brand: 'Allview'
      model: '$2'
    - regex: '; *(ALLVIEW[ _]?|Allview[ _]?)([^;/]*) Build'
      device: '$1$2'
      brand: 'Allview'
      model: '$2'

    #########
    # Allwinner
    # @ref: http://www.allwinner.com/
    # @models: A31 (13.3"),A20,A10,
    #########
    - regex: '; *(A13-MID) Build'
      device: '$1'
      brand: 'Allwinner'
      model: '$1'
    - regex: '; *(Allwinner)[ _\-]?([^;/]+) Build'
      device: '$1 $2'
      brand: 'Allwinner'
      model: '$1'

    #########
    # Amaway
    # @ref: http://www.amaway.cn/
    #########
    - regex: '; *(A651|A701B?|A702|A703|A705|A706|A707|A711|A712|A713|A717|A722|A785|A801|A802|A803|A901|A902|A1002|A1003|A1006|A1007|A9701|A9703|Q710|Q80) Build'
      device: '$1'
      brand: 'Amaway'
      model: '$1'

    #########
    # Amoi
    # @ref: http://www.amoi.com/en/prd/prd_index.jspx
    #########
    - regex: '; *(?:AMOI|Amoi)[ _]([^;/]+) Build'
      device: 'Amoi $1'
      brand: 'Amoi'
      model: '$1'
    - regex: '^(?:AMOI|Amoi)[ _]([^;/]+) Linux'
      device: 'Amoi $1'
      brand: 'Amoi'
      model: '$1'
    - regex: '; *(A\d{3}W) Build'
      device: 'Amoi $1'
      brand: 'Amoi'
      model: '$1'

    #########
    # Aoc
    # @ref: http://latin.aoc.com/media_tablet
    #########
    - regex: '; *(MW(?:0[789]|10)[^;/]+) Build'
      device: '$1'
      brand: 'Aoc'
      model: '$1'

    #########
    # Aoson
    # @ref: http://www.luckystar.com.cn/en/mid.aspx?page=1
    # @ref: http://www.luckystar.com.cn/en/mobiletel.aspx?page=1
    # @note: brand owned by luckystar
    #########
    - regex: '; *(G7|M1013|M1015G|M11[CG]?|M-?12[B]?|M15|M19[G]?|M30[ACQ]?|M31[GQ]|M32|M33[GQ]|M36|M37|M38|M701T|M710|M712B|M713|M715G|M716G|M71(?:G|GS|T)?|M72[T]?|M73[T]?|M75[GT]?|M77G|M79T|M7L|M7LN|M81|M810|M81T|M82|M92|M92KS|M92S|M717G|M721|M722G|M723|M725G|M739|M785|M791|M92SK|M93D) Build'
      device: 'Aoson $1'
      brand: 'Aoson'
      model: '$1'
    - regex: '; *Aoson ([^;/]+) Build'
      regex_flag: 'i'
      device: 'Aoson $1'
      brand: 'Aoson'
      model: '$1'

    #########
    # Apanda
    # @ref: http://www.apanda.com.cn/
    #########
    - regex: '; *[Aa]panda[ _\-]([^;/]+) Build'
      device: 'Apanda $1'
      brand: 'Apanda'
      model: '$1'

    #########
    # Archos
    # @ref: http://www.archos.com/de/products/tablets.html
    # @ref: http://www.archos.com/de/products/smartphones/index.html
    #########
    - regex: '; *(?:ARCHOS|Archos) ?(GAMEPAD(?:(?! Build|[;/\(\)\-]).)*)'
      device: 'Archos $1'
      brand: 'Archos'
      model: '$1'
      type: 'console'
    - regex: '(?:ARCHOS|Archos)[ _]?((?:(?! Build|[;/\(\)\-]).)+)'
      device: 'Archos $1'
      brand: 'Archos'
      model: '$1'
    - regex: 'ARCHOS; GOGI; ([^;]+);'
      device: 'Archos $1'
      brand: 'Archos'
      model: '$1'
    - regex: '; *(AN(?:7|8|9|10|13)[A-Z0-9]{1,4}) Build'
      device: 'Archos $1'
      brand: 'Archos'
      model: '$1'
    - regex: '; *(A28|A32|A43|A70(?:BHT|CHT|HB|S|X)|A101(?:B|C|IT)|A7EB|A7EB-WK|101G9|80G9) Build'
      device: 'Archos $1'
      brand: 'Archos'
      model: '$1'

    #########
    # A-rival
    # @ref: http://www.a-rival.de/de/
    #########
    - regex: '; *(PAD-FMD[^;/]+) Build'
      device: '$1'
      brand: 'Arival'
      model: '$1'
    - regex: '; *(BioniQ) ?([^;/]+) Build'
      device: '$1 $2'
      brand: 'Arival'
      model: '$1 $2'

    #########
    # Arnova
    # @ref: http://arnovatech.com/
    #########
    - regex: '; *(AN\d[^;/]+|ARCHM\d+) Build'
      device: 'Arnova $1'
      brand: 'Arnova'
      model: '$1'
    - regex: '; *(?:ARNOVA|Arnova) ?([^;/]+) Build'
      device: 'Arnova $1'
      brand: 'Arnova'
      model: '$1'

    #########
    # Assistant
    # @ref: http://www.assistant.ua
    #########
    - regex: '; *(?:ASSISTANT )?(AP)-?([1789]\d{2}[A-Z]{0,2}|80104) Build'
      device: 'Assistant $1-$2'
      brand: 'Assistant'
      model: '$1-$2'

    #########
    # Asus
    # @ref: http://www.asus.com/uk/Tablets_Mobile/
    #########
    - regex: '; *(ME(?:[13]\d{2})[^;/]+|K0[01][A-Z]|Nexus 10|Nexus 7(?: 2013)?|PadFone[^;/]*|Transformer[^;/]*|TF\d{3}[^;/]*|eeepc) Build'
      device: 'Asus $1'
      brand: 'Asus'
      model: '$1'
    - regex: '; *ASUS[ _]*([^;/]+) Build'
      device: 'Asus $1'
      brand: 'Asus'
      model: '$1'


    #########
    # Avvio
    # @ref: http://www.avviomobile.com
    #########
    - regex: '(Avvio)[ _\-]?(pad[a-z0-9\-\.]*)'
      regex_flag: 'i'
      brand: 'Avvio'
      model: '$2'
      type: 'tablet'
    - regex: '(Avvio)[ _\-]?([a-z0-9\-\.]+)'
      regex_flag: 'i'
      brand: 'Avvio'
      model: '$2'
      type: 'smartphone'

    #########
    # Garmin-Asus
    #########
    - regex: '; *Garmin-Asus ([^;/]+) Build'
      device: 'Garmin-Asus $1'
      brand: 'Garmin-Asus'
      model: '$1'
    - regex: '; *(Garminfone) Build'
      device: 'Garmin $1'
      brand: 'Garmin-Asus'
      model: '$1'

    #########
    # Attab
    # @ref: http://www.theattab.com/
    #########
    - regex: '; (@TAB-[^;/]+) Build'
      device: '$1'
      brand: 'Attab'
      model: '$1'

    #########
    # Audiosonic
    # @ref: ??
    # @note: Take care with Docomo T-01 Toshiba
    #########
    - regex: '; *(T-(?:(?!01)\d{2})[^;/]+) Build'
      device: '$1'
      brand: 'Audiosonic'
      model: '$1'

    #########
    # Axioo
    # @ref: http://www.axiooworld.com/ww/index.php
    #########
    - regex: ' (?:Axioo[ _\-]([^;/]+)|(pico(?:pad|phone))[ _\-]([^;/]+)) ?(?:Build|;|\))'
      regex_flag: 'i'
      device: 'Axioo $1$2 $3'
      brand: 'Axioo'
      model: '$1$2 $3'

    #########
    # Azend
    # @ref: http://azendcorp.com/index.php/products/portable-electronics
    #########
    - regex: '; *(V(?:100|700|800)[^;/]*) Build'
      device: '$1'
      brand: 'Azend'
      model: '$1'

    #########
    # Bak
    # @ref: http://www.bakinternational.com/produtos.php?cat=80
    #########
    - regex: '; *(IBAK\-[^;/]*) Build'
      regex_flag: 'i'
      device: '$1'
      brand: 'Bak'
      model: '$1'

    #########
    # Bedove
    # @ref: http://www.bedove.com/product.html
    # @models: HY6501|HY5001|X12|X21|I5
    #########
    - regex: '; *(HY5001|HY6501|X12|X21|I5) Build'
      device: 'Bedove $1'
      brand: 'Bedove'
      model: '$1'

    #########
    # Benss
    # @ref: http://www.benss.net/
    #########
    - regex: '; *(JC-[^;/]*) Build'
      device: 'Benss $1'
      brand: 'Benss'
      model: '$1'

    #########
    # Blackberry
    # @ref: http://uk.blackberry.com/
    # @note: Android Apps seams to be used here
    #########
    - regex: '; *(BB) ([^;/]+) Build'
      device: '$1 $2'
      brand: 'Blackberry'
      model: '$2'

    #########
    # Blackbird
    # @ref: http://iblackbird.co.kr
    #########
    - regex: '; *(BlackBird)[ _](I8.*) Build'
      device: '$1 $2'
      brand: '$1'
      model: '$2'
    - regex: '; *(BlackBird)[ _](.*) Build'
      device: '$1 $2'
      brand: '$1'
      model: '$2'

    #########
    # Blaupunkt
    # @ref: http://www.blaupunkt.com
    #########
    # Endeavour
    - regex: '; *([0-9]+BP[EM][^;/]*|Endeavour[^;/]+) Build'
      device: 'Blaupunkt $1'
      brand: 'Blaupunkt'
      model: '$1'

    #########
    # Blu
    # @ref: http://bluproducts.com
    #########
    - regex: '; *((?:BLU|Blu)[ _\-])([^;/]+) Build'
      device: '$1$2'
      brand: 'Blu'
      model: '$2'
    # BMOBILE = operator branded device
    - regex: '; *(?:BMOBILE )?(Blu|BLU|DASH [^;/]+|VIVO 4\.3|TANK 4\.5) Build'
      device: '$1'
      brand: 'Blu'
      model: '$1'

    #########
    # Blusens
    # @ref: http://www.blusens.com/es/?sg=1&sv=al&roc=1
    #########
    # tablet
    - regex: '; *(TOUCH\d[^;/]+) Build'
      device: '$1'
      brand: 'Blusens'
      model: '$1'

    #########
    # Bmobile
    # @ref: http://bmobile.eu.com/?categoria=smartphones-2
    # @note: Might collide with Maxx as AX is used also there.
    #########
    # smartphone
    - regex: '; *(?:Bmobile_)?(AX5\d+) Build'
      device: '$1'
      brand: 'Bmobile'
      model: '$1'
      type: 'smartphone'

    #########
    # bq
    # @ref: http://bqreaders.com
    #########
    - regex: '; *([Bb]q) (Aquaris[^;/]*);? Build'
      device: '$1 $2'
      brand: 'bq'
      model: '$2'
      type: 'smartphone'
    - regex: '; *([Bb]q) ([^;/]+);? Build'
      device: '$1 $2'
      brand: 'bq'
      model: '$2'
      type: 'tablet'
    - regex: '; *(Maxwell [^;/]+) Build'
      device: '$1'
      brand: 'bq'
      model: '$1'
      type: 'tablet'

    #########
    # Braun Phototechnik
    # @ref: http://www.braun-phototechnik.de/en/products/list/~pcat.250/Tablet-PC.html
    #########
    - regex: '; *((?:B-Tab|B-TAB) ?\d[^;/]+) Build'
      device: '$1'
      brand: 'Braun'
      model: '$1'

    #########
    # Broncho
    # @ref: http://www.broncho.cn/
    #########
    - regex: '; *(Broncho) ([^;/]+) Build'
      device: '$1 $2'
      brand: '$1'
      model: '$2'

    #########
    # Captiva
    # @ref: http://www.captiva-power.de
    #########
    - regex: '; *CAPTIVA ([^;/]+) Build'
      device: 'Captiva $1'
      brand: 'Captiva'
      model: '$1'

    #########
    # Casio
    # @ref: http://www.casiogzone.com/
    #########
    - regex: '; *(C771|CAL21|IS11CA) Build'
      device: '$1'
      brand: 'Casio'
      model: '$1'

    #########
    # Cat
    # @ref: http://www.cat-sound.com
    #########
    - regex: '; *(?:Cat|CAT) ([^;/]+) Build'
      device: 'Cat $1'
      brand: 'Cat'
      model: '$1'
    - regex: '; *(?:Cat)(Nova.*) Build'
      device: 'Cat $1'
      brand: 'Cat'
      model: '$1'
    - regex: '; *(INM8002KP|ADM8000KP_[AB]) Build'
      device: '$1'
      brand: 'Cat'
      model: 'Tablet PHOENIX 8.1J0'

    #########
    # Celkon
    # @ref: http://www.celkonmobiles.com/?_a=products
    # @models: A10, A19Q, A101, A105, A107, A107\+, A112, A118, A119, A119Q, A15, A19, A20, A200, A220, A225, A22 Race, A27, A58, A59, A60, A62, A63, A64, A66, A67, A69, A75, A77, A79, A8\+, A83, A85, A86, A87, A89 Ultima, A9\+, A90, A900, A95, A97i, A98, AR 40, AR 45, AR 50, ML5
    #########
    - regex: '; *(?:[Cc]elkon[ _\*]|CELKON[ _\*])([^;/\)]+) ?(?:Build|;|\))'
      device: '$1'
      brand: 'Celkon'
      model: '$1'
    - regex: 'Build/(?:[Cc]elkon)+_?([^;/_\)]+)'
      device: '$1'
      brand: 'Celkon'
      model: '$1'
    - regex: '; *(CT)-?(\d+) Build'
      device: '$1$2'
      brand: 'Celkon'
      model: '$1$2'
    # smartphones
    - regex: '; *(A19|A19Q|A105|A107[^;/\)]*) ?(?:Build|;|\))'
      device: '$1'
      brand: 'Celkon'
      model: '$1'

    #########
    # ChangJia
    # @ref: http://www.cjshowroom.com/eproducts.aspx?classcode=004001001
    # @brief: China manufacturer makes tablets for different small brands
    #         (eg. http://www.zeepad.net/index.html)
    #########
    - regex: '; *(TPC[0-9]{4,5}) Build'
      device: '$1'
      brand: 'ChangJia'
      model: '$1'

    #########
    # Cloudfone
    # @ref: http://www.cloudfonemobile.com/
    #########
    - regex: '; *(Cloudfone)[ _](Excite)([^ ][^;/]+) Build'
      device: '$1 $2 $3'
      brand: 'Cloudfone'
      model: '$1 $2 $3'
    - regex: '; *(Excite|ICE)[ _](\d+[^;/]+) Build'
      device: 'Cloudfone $1 $2'
      brand: 'Cloudfone'
      model: 'Cloudfone $1 $2'
    - regex: '; *(Cloudfone|CloudPad)[ _]([^;/]+) Build'
      device: '$1 $2'
      brand: 'Cloudfone'
      model: '$1 $2'

    #########
    # Cmx
    # @ref: http://cmx.at/de/
    #########
    - regex: '; *((?:Aquila|Clanga|Rapax)[^;/]+) Build'
      regex_flag: 'i'
      device: '$1'
      brand: 'Cmx'
      model: '$1'

    #########
    # CobyKyros
    # @ref: http://cobykyros.com
    # @note: Be careful with MID\d{3} from MpMan or Manta
    #########
    - regex: '; *(?:CFW-|Kyros )?(MID[0-9]{4}(?:[ABC]|SR|TV)?)(\(3G\)-4G| GB 8K| 3G| 8K| GB)? *(?:Build|[;\)])'
      device: 'CobyKyros $1$2'
      brand: 'CobyKyros'
      model: '$1$2'

    #########
    # Coolpad
    # @ref: ??
    #########
    - regex: '; *([^;/]*)Coolpad[ _]([^;/]+) Build'
      device: '$1$2'
      brand: 'Coolpad'
      model: '$1$2'

    #########
    # Cube
    # @ref: http://www.cube-tablet.com/buy-products.html
    #########
    - regex: '; *(CUBE[ _])?([KU][0-9]+ ?GT.*|A5300) Build'
      regex_flag: 'i'
      device: '$1$2'
      brand: 'Cube'
      model: '$2'
      type: 'tablet'

    #########
    # Cubot
    # @ref: http://www.cubotmall.com/
    #########
    - regex: '; *CUBOT ([^;/]+) Build'
      regex_flag: 'i'
      device: '$1'
      brand: 'Cubot'
      model: '$1'
    - regex: '; *BOBBY Build'
      regex_flag: 'i'
      device: '$1'
      brand: 'Cubot'
      model: '$1'

    #########
    # Danew
    # @ref: http://www.danew.com/produits-tablette.php
    #########
    - regex: '; *(Dslide ?[^;/]+) Build'
      device: '$1'
      brand: 'Danew'
      model: '$1'
      type: 'tablet'

    #########
    # Dell
    # @ref: http://www.dell.com
    # @ref: http://www.softbank.jp/mobile/support/product/101dl/
    # @ref: http://www.softbank.jp/mobile/support/product/001dl/
    # @ref: http://developer.emnet.ne.jp/android.html
    # @ref: http://www.dell.com/in/p/mobile-xcd28/pd
    # @ref: http://www.dell.com/in/p/mobile-xcd35/pd
    #########
    - regex: '; *(XCD)[ _]?(28|35) Build'
      device: 'Dell $1$2'
      brand: 'Dell'
      model: '$1$2'
    - regex: '; *(001DL) Build'
      device: 'Dell $1'
      brand: 'Dell'
      model: 'Streak'
    - regex: '; *(?:Dell|DELL) (Streak) Build'
      device: 'Dell $1'
      brand: 'Dell'
      model: 'Streak'
    - regex: '; *(101DL|GS01|Streak Pro[^;/]*) Build'
      device: 'Dell $1'
      brand: 'Dell'
      model: 'Streak Pro'
    - regex: '; *([Ss]treak ?7) Build'
      device: 'Dell $1'
      brand: 'Dell'
      model: 'Streak 7'
    - regex: '; *(Mini-3iX) Build'
      device: 'Dell $1'
      brand: 'Dell'
      model: '$1'
    - regex: '; *(?:Dell|DELL)[ _](Aero|Venue|Thunder|Mini.*|Streak[ _]Pro) Build'
      device: 'Dell $1'
      brand: 'Dell'
      model: '$1'
    - regex: '; *Dell[ _]([^;/]+) Build'
      device: 'Dell $1'
      brand: 'Dell'
      model: '$1'
    - regex: '; *Dell ([^;/]+) Build'
      device: 'Dell $1'
      brand: 'Dell'
      model: '$1'

    #########
    # Denver
    # @ref: http://www.denver-electronics.com/tablets1/
    #########
    - regex: '; *(TA[CDQ]-\d+[^;/]*) Build'
      device: '$1'
      brand: 'Denver'
      model: '$1'

    #########
    # Dex
    # @ref: http://dex.ua/
    #########
    - regex: '; *(iP[789]\d{2}(?:-3G)?|IP10\d{2}(?:-8GB)?) Build'
      device: '$1'
      brand: 'Dex'
      model: '$1'

    #########
    # DNS AirTab
    # @ref: http://www.dns-shop.ru/
    #########
    - regex: '; *(AirTab)[ _\-]([^;/]+) Build'
      device: '$1 $2'
      brand: 'DNS'
      model: '$1 $2'

    #########
    # Docomo (Operator Branded Device)
    # @ref: http://www.ipentec.com/document/document.aspx?page=android-useragent
    #########
    - regex: '; *(F\-\d[^;/]+) Build'
      device: '$1'
      brand: 'Fujitsu'
      model: '$1'
    - regex: '; *(HT-03A) Build'
      device: '$1'
      brand: 'HTC'
      model: 'Magic'
    - regex: '; *(HT\-\d[^;/]+) Build'
      device: '$1'
      brand: 'HTC'
      model: '$1'
    - regex: '; *(L\-\d[^;/]+) Build'
      device: '$1'
      brand: 'LG'
      model: '$1'
    - regex: '; *(N\-\d[^;/]+) Build'
      device: '$1'
      brand: 'Nec'
      model: '$1'
    - regex: '; *(P\-\d[^;/]+) Build'
      device: '$1'
      brand: 'Panasonic'
      model: '$1'
    - regex: '; *(SC\-\d[^;/]+) Build'
      device: '$1'
      brand: 'Samsung'
      model: '$1'
    - regex: '; *(SH\-\d[^;/]+) Build'
      device: '$1'
      brand: 'Sharp'
      model: '$1'
    - regex: '; *(SO\-\d[^;/]+) Build'
      device: '$1'
      brand: 'SonyEricsson'
      model: '$1'
    - regex: '; *(T\-01[^;/]+) Build'
      device: '$1'
      brand: 'Toshiba'
      model: '$1'

    #########
    # DOOV
    # @ref: http://www.doov.com.cn/
    #########
    - regex: '; *(DOOV)[ _]([^;/]+) Build'
      device: '$1 $2'
      brand: 'DOOV'
      model: '$2'

    #########
    # Enot
    # @ref: http://www.enot.ua/
    #########
    - regex: '; *(Enot|ENOT)[ -]?([^;/]+) Build'
      device: '$1 $2$3'
      brand: 'Enot'
      model: '$2$3'

    #########
    # Evercoss
    # @ref: http://evercoss.com/android/
    #########
    - regex: '; *[^;/]+ Build/(?:CROSS|Cross)+[ _\-]([^\)]+)'
      device: 'CROSS $1'
      brand: 'Evercoss'
      model: 'Cross $1'
    - regex: '; *(CROSS|Cross)[ _\-]([^;/]+) Build'
      device: '$1 $2'
      brand: 'Evercoss'
      model: 'Cross $2'

    #########
    # Explay
    # @ref: http://explay.ru/
    #########
    - regex: '; *Explay[_ ]((?:(?![\)]| Build).)+)'
      device: '$1'
      brand: 'Explay'
      model: '$1'

    #########
    # Fly
    # @ref: http://www.fly-phone.com/
    #########
    - regex: '; *(IQ.*) Build'
      device: '$1'
      brand: 'Fly'
      model: '$1'
    - regex: '; *(Fly|FLY)[ _](IQ[^;]+|F[34]\d+[^;]*);? Build'
      device: '$1 $2'
      brand: 'Fly'
      model: '$2'

    #########
    # Fujitsu
    # @ref: http://www.fujitsu.com/global/
    #########
    - regex: '; *(M532|Q572|FJL21) Build/'
      device: '$1'
      brand: 'Fujitsu'
      model: '$1'

    #########
    # Galapad
    # @ref: http://www.galapad.net/product.html
    #########
    - regex: '; *(G1) Build'
      device: '$1'
      brand: 'Galapad'
      model: '$1'

    #########
    # Geeksphone
    # @ref: http://www.geeksphone.com/
    #########
    - regex: '; *(Geeksphone) ([^;/]+) Build'
      device: '$1 $2'
      brand: '$1'
      model: '$2'

    #########
    # Gfive
    # @ref: http://www.gfivemobile.com/en
    #########
    #- regex: '; *(G\'?FIVE) ([^;/]+) Build' # there is a problem with python yaml parser here
    - regex: '; *(G[^F]?FIVE) ([^;/]+) Build'
      device: '$1 $2'
      brand: 'Gfive'
      model: '$2'

    #########
    # Gionee
    # @ref: http://www.gionee.com/
    #########
    - regex: '; *(Gionee)[ _\-]([^;/]+)(?:/[^;/]+)? Build'
      regex_flag: 'i'
      device: '$1 $2'
      brand: 'Gionee'
      model: '$2'
    - regex: '; *(GN\d+[A-Z]?|INFINITY_PASSION|Ctrl_V1) Build'
      device: 'Gionee $1'
      brand: 'Gionee'
      model: '$1'
    - regex: '; *(E3) Build/JOP40D'
      device: 'Gionee $1'
      brand: 'Gionee'
      model: '$1'

    #########
    # GoClever
    # @ref: http://www.goclever.com
    #########
    - regex: '; *((?:FONE|QUANTUM|INSIGNIA) \d+[^;/]*|PLAYTAB) Build'
      device: 'GoClever $1'
      brand: 'GoClever'
      model: '$1'
    - regex: '; *GOCLEVER ([^;/]+) Build'
      device: 'GoClever $1'
      brand: 'GoClever'
      model: '$1'

    #########
    # Google
    # @ref: http://www.google.de/glass/start/
    #########
    - regex: '; *(Glass \d+) Build'
      device: '$1'
      brand: 'Google'
      model: '$1'

    #########
    # Gigabyte
    # @ref: http://gsmart.gigabytecm.com/en/
    #########
    - regex: '; *(GSmart)[ -]([^/]+) Build'
      device: '$1 $2'
      brand: 'Gigabyte'
      model: '$1 $2'

    #########
    # Freescale development boards
    # @ref: http://www.freescale.com/webapp/sps/site/prod_summary.jsp?code=IMX53QSB
    #########
    - regex: '; *(imx5[13]_[^/]+) Build'
      device: 'Freescale $1'
      brand: 'Freescale'
      model: '$1'

    #########
    # Haier
    # @ref: http://www.haier.com/
    # @ref: http://www.haier.com/de/produkte/tablet/
    #########
    - regex: '; *Haier[ _\-]([^/]+) Build'
      device: 'Haier $1'
      brand: 'Haier'
      model: '$1'
    - regex: '; *(PAD1016) Build'
      device: 'Haipad $1'
      brand: 'Haipad'
      model: '$1'

    #########
    # Haipad
    # @ref: http://www.haipad.net/
    # @models: V7P|M7SM7S|M9XM9X|M7XM7X|M9|M8|M7-M|M1002|M7|M701
    #########
    - regex: '; *(M701|M7|M8|M9) Build'
      device: 'Haipad $1'
      brand: 'Haipad'
      model: '$1'

    #########
    # Hannspree
    # @ref: http://www.hannspree.eu/
    # @models: SN10T1|SN10T2|SN70T31B|SN70T32W
    #########
    - regex: '; *(SN\d+T[^;\)/]*)(?: Build|[;\)])'
      device: 'Hannspree $1'
      brand: 'Hannspree'
      model: '$1'

    #########
    # HCLme
    # @ref: http://www.hclmetablet.com/india/
    #########
    - regex: 'Build/HCL ME Tablet ([^;\)]+)[\);]'
      device: 'HCLme $1'
      brand: 'HCLme'
      model: '$1'
    - regex: '; *([^;\/]+) Build/HCL'
      device: 'HCLme $1'
      brand: 'HCLme'
      model: '$1'

    #########
    # Hena
    # @ref: http://www.henadigital.com/en/product/index.asp?id=6
    #########
    - regex: '; *(MID-?\d{4}C[EM]) Build'
      device: 'Hena $1'
      brand: 'Hena'
      model: '$1'

    #########
    # Hisense
    # @ref: http://www.hisense.com/
    #########
    - regex: '; *(EG\d{2,}|HS-[^;/]+|MIRA[^;/]+) Build'
      device: 'Hisense $1'
      brand: 'Hisense'
      model: '$1'
    - regex: '; *(andromax[^;/]+) Build'
      regex_flag: 'i'
      device: 'Hisense $1'
      brand: 'Hisense'
      model: '$1'

    #########
    # hitech
    # @ref: http://www.hitech-mobiles.com/
    #########
    - regex: '; *(?:AMAZE[ _](S\d+)|(S\d+)[ _]AMAZE) Build'
      device: 'AMAZE $1$2'
      brand: 'hitech'
      model: 'AMAZE $1$2'

    #########
    # HP
    # @ref: http://www.hp.com/
    #########
    - regex: '; *(PlayBook) Build'
      device: 'HP $1'
      brand: 'HP'
      model: '$1'
    - regex: '; *HP ([^/]+) Build'
      device: 'HP $1'
      brand: 'HP'
      model: '$1'
    - regex: '; *([^/]+_tenderloin) Build'
      device: 'HP TouchPad'
      brand: 'HP'
      model: 'TouchPad'

    #########
    # HTC
    # @ref: http://www.htc.com/www/products/
    # @ref: http://en.wikipedia.org/wiki/List_of_HTC_phones
    #########
    - regex: 'USCCHTC(\d+)'
      brand: 'HTC'
      model: '$1'
    - regex: 'USCC(ADR\d+)'
      brand: 'HTC'
      model: '$1'
    # Android HTC with Version Number matcher
    # ; HTC_0P3Z11/1.12.161.3 Build
    # ;HTC_A3335 V2.38.841.1 Build
    - regex: '; *(?:HTC)(?:[ _/]((?:(?![ _/;\(\)]|Build|MIUI).)+))(?:[ _/]((?:(?![ _/;\(\)]|HTC|Build|MIUI).)+))?(?:[ _/]((?:(?![ _/;\(\)]|Build|MIUI).)+))?(?:[ _/]((?:(?![/;\)]|Build|MIUI).)+))?(?:[/\\]1\.0 | V|/| +)\d+\.\d[\d\.]+'
      device: 'HTC $1 $2 $3 $4'
      brand: 'HTC'
      model: '$1 $2 $3 $4'
    # Android HTC without Version Number matcher
    - regex: '; *(?:HTC[ ;])?(?:HTC(?:_blocked)*)(?:(?:[ _/]|; *)((?:(?![ _/;\(\)\\]|USCCHTC|HTC|Build|MIUI).)+))(?:[ _/]((?:(?![ _/;\(\)\\]|Build|MIUI|1\.0).)+))?(?:[ _/]((?:(?![ _/;\(\)\\]|Build|MIUI|1\.0).)+))?(?:[ _/]((?:(?![/;\)]|Build|MIUI|1\.0).)+))?'
      regex_flag: 'i'
      device: 'HTC $1 $2 $3 $4'
      brand: 'HTC'
      model: '$1 $2 $3 $4'
    # HTC Streaming Player
    - regex: 'HTC Streaming Player [^\/]*/[^\/]*/ htc_([^/]+) /'
      device: 'HTC $1'
      brand: 'HTC'
      model: '$1'
    # general matcher for anything else
    - regex: '(?:[;,] *|^)(?:htccn_chs-)?HTC[ _\-]?((?:(?! Build|clay|Android|-?Mozilla| Opera| Profile| UNTRUSTED|[;/\(\)]).)+)'
      regex_flag: 'i'
      device: 'HTC $1'
      brand: 'HTC'
      model: '$1'
    # Android matchers without HTC
    - regex: '; *(A6277|ADR6200|ADR6300|ADR6350|ADR6400[A-Z]*|ADR6425[A-Z]*|APX515CKT|ARIA|Desire[^_ ]*|Dream|EndeavorU|Eris|Evo|Flyer|HD2|Hero|HERO200|Hero CDMA|HTL21|Incredible|Inspire[A-Z0-9]*|Legend|Liberty|Nexus ?(?:One|HD2)|One|One S C2|One[ _]?(?:S|V|X\+?)\w*|PC36100|PG06100|PG86100|S31HT|Sensation|Wildfire)(?: Build|[/;\(\)])'
      regex_flag: 'i'
      device: 'HTC $1'
      brand: 'HTC'
      model: '$1'
    - regex: '; *(ADR6200|ADR6400L|ADR6425LVW|Amaze|DesireS?|EndeavorU|Eris|EVO|Evo\d[A-Z]+|HD2|IncredibleS?|Inspire[A-Z0-9]*|Inspire[A-Z0-9]*|Sensation[A-Z0-9]*|Wildfire)(?:(?:[ _/\-])((?:(?![ _/;\(\)]|Build|MIUI).)+))(?:[ _/]((?:(?![ _/;\(\)]|Build|MIUI|1\.0).)+))?(?:[ _/]((?:(?![ _/;\(\)]|Build|MIUI|1\.0).)+))?(?:[ _/]((?:(?![/;\)]|Build|MIUI|1\.0).)+))?'
      regex_flag: 'i'
      device: 'HTC $1 $2 $3 $4'
      brand: 'HTC'
      model: '$1 $2 $3 $4'

    #########
    # Hyundai
    # @ref: http://www.hyundaitechnologies.com
    #########
    - regex: '; *HYUNDAI (T\d[^/]*) Build'
      device: 'Hyundai $1'
      brand: 'Hyundai'
      model: '$1'
    - regex: '; *HYUNDAI ([^;/]+) Build'
      device: 'Hyundai $1'
      brand: 'Hyundai'
      model: '$1'
    # X900? http://www.amazon.com/Hyundai-X900-Retina-Android-Bluetooth/dp/B00AO07H3O
    - regex: '; *(X700|Hold X|MB-6900) Build'
      device: 'Hyundai $1'
      brand: 'Hyundai'
      model: '$1'

    #########
    # iBall
    # @ref: http://www.iball.co.in/Category/Mobiles/22
    #########
    - regex: '; *(?:iBall[ _\-])?(Andi)[ _]?(\d[^;/]*) Build'
      regex_flag: 'i'
      device: '$1 $2'
      brand: 'iBall'
      model: '$1 $2'
    - regex: '; *(IBall)(?:[ _]([^;/]+)|) Build'
      regex_flag: 'i'
      device: '$1 $2'
      brand: 'iBall'
      model: '$2'

    #########
    # IconBIT
    # @ref: http://www.iconbit.com/catalog/tablets/
    #########
    - regex: '; *(NT-\d+[^ ;/]*|Net[Tt]AB [^;/]+|Mercury [A-Z]+|iconBIT)(?: S/N:[^;/]+)? Build'
      device: '$1'
      brand: 'IconBIT'
      model: '$1'

    #########
    # IMO
    # @ref: http://www.ponselimo.com/
    #########
    - regex: '; *(IMO)[ _]([^;/]+) Build'
      regex_flag: 'i'
      device: '$1 $2'
      brand: 'IMO'
      model: '$2'

    #########
    # i-mobile
    # @ref: http://www.i-mobilephone.com/
    #########
    - regex: '; *i-?mobile[ _]([^/]+) Build/'
      regex_flag: 'i'
      device: 'i-mobile $1'
      brand: 'imobile'
      model: '$1'
    - regex: '; *(i-(?:style|note)[^/]*) Build/'
      regex_flag: 'i'
      device: 'i-mobile $1'
      brand: 'imobile'
      model: '$1'

    #########
    # Impression
    # @ref: http://impression.ua/planshetnye-kompyutery
    #########
    - regex: '; *(ImPAD) ?(\d+(?:.)*) Build'
      device: '$1 $2'
      brand: 'Impression'
      model: '$1 $2'

    #########
    # Infinix
    # @ref: http://www.infinixmobility.com/index.html
    #########
    - regex: '; *(Infinix)[ _]([^;/]+) Build'
      device: '$1 $2'
      brand: 'Infinix'
      model: '$2'

    #########
    # Informer
    # @ref: ??
    #########
    - regex: '; *(Informer)[ \-]([^;/]+) Build'
      device: '$1 $2'
      brand: 'Informer'
      model: '$2'

    #########
    # Intenso
    # @ref: http://www.intenso.de
    # @models: 7":TAB 714,TAB 724;8":TAB 814,TAB 824;10":TAB 1004
    #########
    - regex: '; *(TAB) ?([78][12]4) Build'
      device: 'Intenso $1'
      brand: 'Intenso'
      model: '$1 $2'

    #########
    # Intex
    # @ref: http://intexmobile.in/index.aspx
    # @note: Zync also offers a "Cloud Z5" device
    #########
    # smartphones
    - regex: '; *(?:Intex[ _])?(AQUA|Aqua)([ _\.\-])([^;/]+) *(?:Build|;)'
      device: '$1$2$3'
      brand: 'Intex'
      model: '$1 $3'
    # matches "INTEX CLOUD X1"
    - regex: '; *(?:INTEX|Intex)(?:[_ ]([^\ _;/]+))(?:[_ ]([^\ _;/]+))? *(?:Build|;)'
      device: '$1 $2'
      brand: 'Intex'
      model: '$1 $2'
    # tablets
    - regex: '; *([iI]Buddy)[ _]?(Connect)(?:_|\?_| )?([^;/]*) *(?:Build|;)'
      device: '$1 $2 $3'
      brand: 'Intex'
      model: 'iBuddy $2 $3'
    - regex: '; *(I-Buddy)[ _]([^;/]+) *(?:Build|;)'
      device: '$1 $2'
      brand: 'Intex'
      model: 'iBuddy $2'

    #########
    # iOCEAN
    # @ref: http://www.iocean.cc/
    #########
    - regex: '; *(iOCEAN) ([^/]+) Build'
      regex_flag: 'i'
      device: '$1 $2'
      brand: 'iOCEAN'
      model: '$2'

    #########
    # i.onik
    # @ref: http://www.i-onik.de/
    #########
    - regex: '; *(TP\d+(?:\.\d+)?\-\d[^;/]+) Build'
      device: 'ionik $1'
      brand: 'ionik'
      model: '$1'

    #########
    # IRU.ru
    # @ref: http://www.iru.ru/catalog/soho/planetable/
    #########
    - regex: '; *(M702pro) Build'
      device: '$1'
      brand: 'Iru'
      model: '$1'

    #########
    # Ivio
    # @ref: http://www.ivio.com/mobile.php
    # @models: DG80,DG20,DE38,DE88,MD70
    #########
    - regex: '; *(DE88Plus|MD70) Build'
      device: '$1'
      brand: 'Ivio'
      model: '$1'
    - regex: '; *IVIO[_\-]([^;/]+) Build'
      device: '$1'
      brand: 'Ivio'
      model: '$1'

    #########
    # Jaytech
    # @ref: http://www.jay-tech.de/jaytech/servlet/frontend/
    #########
    - regex: '; *(TPC-\d+|JAY-TECH) Build'
      device: '$1'
      brand: 'Jaytech'
      model: '$1'

    #########
    # Jiayu
    # @ref: http://www.ejiayu.com/en/Product.html
    #########
    - regex: '; *(JY-[^;/]+|G[234]S?) Build'
      device: '$1'
      brand: 'Jiayu'
      model: '$1'

    #########
    # JXD
    # @ref: http://www.jxd.hk/
    #########
    - regex: '; *(JXD)[ _\-]([^;/]+) Build'
      device: '$1 $2'
      brand: 'JXD'
      model: '$2'

    #########
    # Karbonn
    # @ref: http://www.karbonnmobiles.com/products_tablet.php
    #########
    - regex: '; *Karbonn[ _]?([^;/]+) *(?:Build|;)'
      regex_flag: 'i'
      device: '$1'
      brand: 'Karbonn'
      model: '$1'
    - regex: '; *([^;]+) Build/Karbonn'
      device: '$1'
      brand: 'Karbonn'
      model: '$1'
    - regex: '; *(A11|A39|A37|A34|ST8|ST10|ST7|Smart Tab3|Smart Tab2|Titanium S\d) +Build'
      device: '$1'
      brand: 'Karbonn'
      model: '$1'

    #########
    # KDDI (Operator Branded Device)
    # @ref: http://www.ipentec.com/document/document.aspx?page=android-useragent
    #########
    - group:
      regex: 'ISW?\d|INFOBAR'
      - regex: '; *(IS01|IS03|IS05|IS\d{2}SH) Build'
        device: '$1'
        brand: 'Sharp'
        model: '$1'
      - regex: '; *(IS04) Build'
        device: '$1'
        brand: 'Regza'
        model: '$1'
      - regex: '; *(IS06|IS\d{2}PT) Build'
        device: '$1'
        brand: 'Pantech'
        model: '$1'
      - regex: '; *(IS11S) Build'
        device: '$1'
        brand: 'SonyEricsson'
        model: 'Xperia Acro'
      - regex: '; *(IS11CA) Build'
        device: '$1'
        brand: 'Casio'
        model: 'GzOne $1'
      - regex: '; *(IS11LG) Build'
        device: '$1'
        brand: 'LG'
        model: 'Optimus X'
      - regex: '; *(IS11N) Build'
        device: '$1'
        brand: 'Medias'
        model: '$1'
      - regex: '; *(IS11PT) Build'
        device: '$1'
        brand: 'Pantech'
        model: 'MIRACH'
      - regex: '; *(IS12F) Build'
        device: '$1'
        brand: 'Fujitsu'
        model: 'Arrows ES'
      # @ref: https://ja.wikipedia.org/wiki/IS12M
      - regex: '; *(IS12M) Build'
        device: '$1'
        brand: 'Motorola'
        model: 'XT909'
      - regex: '; *(IS12S) Build'
        device: '$1'
        brand: 'SonyEricsson'
        model: 'Xperia Acro HD'
      - regex: '; *(ISW11F) Build'
        device: '$1'
        brand: 'Fujitsu'
        model: 'Arrowz Z'
      - regex: '; *(ISW11HT) Build'
        device: '$1'
        brand: 'HTC'
        model: 'EVO'
      - regex: '; *(ISW11K) Build'
        device: '$1'
        brand: 'Kyocera'
        model: 'DIGNO'
      - regex: '; *(ISW11M) Build'
        device: '$1'
        brand: 'Motorola'
        model: 'Photon'
      - regex: '; *(ISW11SC) Build'
        device: '$1'
        brand: 'Samsung'
        model: 'GALAXY S II WiMAX'
      - regex: '; *(ISW12HT) Build'
        device: '$1'
        brand: 'HTC'
        model: 'EVO 3D'
      - regex: '; *(ISW13HT) Build'
        device: '$1'
        brand: 'HTC'
        model: 'J'
      - regex: '; *(ISW?[0-9]{2}[A-Z]{0,2}) Build'
        device: '$1'
        brand: 'KDDI'
        model: '$1'
      - regex: '; *(INFOBAR [^;/]+) Build'
        device: '$1'
        brand: 'KDDI'
        model: '$1'

    #########
    # Kingcom
    # @ref: http://www.e-kingcom.com
    #########
    - regex: '; *(JOYPAD|Joypad)[ _]([^;/]+) Build/'
      device: '$1 $2'
      brand: 'Kingcom'
      model: '$1 $2'

    #########
    # Kobo
    # @ref: https://en.wikipedia.org/wiki/Kobo_Inc.
    # @ref: http://www.kobo.com/devices#tablets
    #########
    - regex: '; *(Vox|VOX|Arc|K080) Build/'
      regex_flag: 'i'
      device: '$1'
      brand: 'Kobo'
      model: '$1'
    - regex: '\b(Kobo Touch)\b'
      device: '$1'
      brand: 'Kobo'
      model: '$1'

    #########
    # K-Touch
    # @ref: ??
    #########
    - regex: '; *(K-Touch)[ _]([^;/]+) Build'
      regex_flag: 'i'
      device: '$1 $2'
      brand: 'Ktouch'
      model: '$2'

    #########
    # KT Tech
    # @ref: http://www.kttech.co.kr
    #########
    - regex: '; *((?:EV|KM)-S\d+[A-Z]?) Build'
      regex_flag: 'i'
      device: '$1'
      brand: 'KTtech'
      model: '$1'

    #########
    # Kyocera
    # @ref: http://www.android.com/devices/?country=all&m=kyocera
    #########
    - regex: '; *(Zio|Hydro|Torque|Event|EVENT|Echo|Milano|Rise|URBANO PROGRESSO|WX04K|WX06K|WX10K|KYL21|101K|C5[12]\d{2}) Build/'
      device: '$1'
      brand: 'Kyocera'
      model: '$1'

    #########
    # Lava
    # @ref: http://www.lavamobiles.com/
    #########
    - regex: '; *(?:LAVA[ _])?IRIS[ _\-]?([^/;\)]+) *(?:;|\)|Build)'
      regex_flag: 'i'
      device: 'Iris $1'
      brand: 'Lava'
      model: 'Iris $1'
    - regex: '; *LAVA[ _]([^;/]+) Build'
      device: '$1'
      brand: 'Lava'
      model: '$1'

    #########
    # Lemon
    # @ref: http://www.lemonmobiles.com/products.php?type=1
    #########
    - regex: '; *(?:(Aspire A1)|(?:LEMON|Lemon)[ _]([^;/]+))_? Build'
      device: 'Lemon $1$2'
      brand: 'Lemon'
      model: '$1$2'

    #########
    # Lenco
    # @ref: http://www.lenco.com/c/tablets/
    #########
    - regex: '; *(TAB-1012) Build/'
      device: 'Lenco $1'
      brand: 'Lenco'
      model: '$1'
    - regex: '; Lenco ([^;/]+) Build/'
      device: 'Lenco $1'
      brand: 'Lenco'
      model: '$1'

    #########
    # Lenovo
    # @ref: http://support.lenovo.com/en_GB/downloads/default.page?#
    #########
    - regex: '; *(A1_07|A2107A-H|S2005A-H|S1-37AH0) Build'
      device: '$1'
      brand: 'Lenovo'
      model: '$1'
    - regex: '; *(Idea(?:Tab|pad))[ _]?([^;/]+)[;]? Build'
      device: 'Lenovo $1 $2'
      brand: 'Lenovo'
      model: '$1 $2'
      type: 'tablet'
    - regex: '; *(ThinkPad) ?(Tablet) Build/'
      device: 'Lenovo $1 $2'
      brand: 'Lenovo'
      model: '$1 $2'
      type: 'tablet'
    - regex: '; *(?:LNV-)?(?:=?[Ll]enovo[ _\-]?|LENOVO[ _])+(?:Micromax )?((?:(?!Build|[;/\)]).)+)[;/]? *(?:Build|[;/\)])'
      device: 'Lenovo $1'
      brand: 'Lenovo'
      model: '$1'
    - regex: '[;,] (?:Vodafone )?(SmartTab) ?(II) ?(\d+) Build/'
      device: 'Lenovo $1 $2 $3'
      brand: 'Lenovo'
      model: '$1 $2 $3'
      type: 'tablet'
    - regex: '; *(3GC101|3GW10[01]|A390) Build/'
      device: '$1'
      brand: 'Lenovo'
      model: '$1'
    - regex: '\b(?:Lenovo|LENOVO)+[ _\-]?([^,;:/ ]+)'
      device: 'Lenovo $1'
      brand: 'Lenovo'
      model: '$1'

    #########
    # Lexibook
    # @ref: http://www.lexibook.com/fr
    #########
    - regex: '; *(MFC\d+)[A-Z]{2}([^;,/]*),? Build'
      device: '$1$2'
      brand: 'Lexibook'
      model: '$1$2'

    #########
    # LG
    # @ref: http://www.lg.com/uk/mobile
    #########
    - regex: '; *(E[34][0-9]{2}|LS[6-8][0-9]{2}|VS[6-9][0-9]+[^;/]+|Nexus [45]|GT540f?|Optimus (?:2X|G|4X HD)|OptimusX4HD) *(?:Build|;)'
      device: '$1'
      brand: 'LG'
      model: '$1'
    - regex: '[;:] *(L-\d+[A-Z]|LGL\d+[A-Z]?)(?:/V\d+)? *(?:Build|[;\)])'
      device: '$1'
      brand: 'LG'
      model: '$1'
    - regex: '; *(LG-)([A-Z]{1,2}\d{2,}(?:(?!Build| V\d+|[,;/\)\(]).)+)'
      device: '$1$2'
      brand: 'LG'
      model: '$2'
    - regex: '; *(LG[ \-]|LG)([^;/]+)[;/]? Build'
      device: '$1$2'
      brand: 'LG'
      model: '$2'
    - regex: '^(LG)-([^;/]+)/ Mozilla/.*; Android'
      device: '$1 $2'
      brand: 'LG'
      model: '$2'

    #########
    # Malata
    # @ref: http://www.malata.com/en/products.aspx?classid=680
    #########
    - regex: '; *((?:SMB|smb)[^;/]+) Build/'
      device: '$1'
      brand: 'Malata'
      model: '$1'
    - regex: '; *(?:Malata|MALATA) ([^;/]+) Build/'
      device: '$1'
      brand: 'Malata'
      model: '$1'

    #########
    # Manta
    # @ref: http://www.manta.com.pl/en
    #########
    - regex: '; *(MS[45][0-9]{3}|MID0[568][NS]?|MID[1-9]|MID[78]0[1-9]|MID970[1-9]|MID100[1-9]) Build/'
      device: '$1'
      brand: 'Manta'
      model: '$1'

    #########
    # Match
    # @ref: http://www.match.net.cn/products.asp
    #########
    - regex: '; *(M1052|M806|M9000|M9100|M9701|MID100|MID120|MID125|MID130|MID135|MID140|MID701|MID710|MID713|MID727|MID728|MID731|MID732|MID733|MID735|MID736|MID737|MID760|MID800|MID810|MID820|MID830|MID833|MID835|MID860|MID900|MID930|MID933|MID960|MID980) Build/'
      device: '$1'
      brand: 'Match'
      model: '$1'

    #########
    # Maxx
    # @ref: http://www.maxxmobile.in/
    # @models: Maxx MSD7-Play, Maxx MX245+ Trance, Maxx AX8 Race, Maxx MSD7 3G- AX50, Maxx Genx Droid 7 - AX40, Maxx AX5 Duo,
    #   Maxx AX3 Duo, Maxx AX3, Maxx AX8 Note II (Note 2), Maxx AX8 Note I, Maxx AX8, Maxx AX5 Plus, Maxx MSD7 Smarty,
    #   Maxx AX9Z Race,
    #   Maxx MT150, Maxx MQ601, Maxx M2020, Maxx Sleek MX463neo, Maxx MX525, Maxx MX192-Tune, Maxx Genx Droid 7 AX353,
    # @note: Need more User-Agents!!!
    #########
    - regex: '; *(GenxDroid7|MSD7.*|AX\d.*|Tab 701|Tab 722) Build/'
      device: 'Maxx $1'
      brand: 'Maxx'
      model: '$1'

    #########
    # Mediacom
    # @ref: http://www.mediacomeurope.it/
    #########
    - regex: '; *(M-PP[^;/]+|PhonePad ?\d{2,}[^;/]+) Build'
      device: 'Mediacom $1'
      brand: 'Mediacom'
      model: '$1'
    - regex: '; *(M-MP[^;/]+|SmartPad ?\d{2,}[^;/]+) Build'
      device: 'Mediacom $1'
      brand: 'Mediacom'
      model: '$1'

    #########
    # Medion
    # @ref: http://www.medion.com/en/
    #########
    - regex: '; *(?:MD_)?LIFETAB[ _]([^;/]+) Build'
      regex_flag: 'i'
      device: 'Medion Lifetab $1'
      brand: 'Medion'
      model: 'Lifetab $1'
    - regex: '; *MEDION ([^;/]+) Build'
      device: 'Medion $1'
      brand: 'Medion'
      model: '$1'

    #########
    # Meizu
    # @ref: http://www.meizu.com
    #########
    - regex: '; *(M030|M031|M035|M040|M065|m9) Build'
      device: 'Meizu $1'
      brand: 'Meizu'
      model: '$1'
    - regex: '; *(?:meizu_|MEIZU )((?:(?!Build|[;\)/]).)+) *(?:Build|[;\)])'
      device: 'Meizu $1'
      brand: 'Meizu'
      model: '$1'

    #########
    # Micromax
    # @ref: http://www.micromaxinfo.com
    #########
    - regex: '\b(?:Micromax[ _\-]?)+(P[A-Za-z0-9]+)'
      regex_flag: 'i'
      device: 'Micromax $1'
      brand: 'Micromax'
      model: '$1'
      device: 'tablet'
    - regex: '\b(?:Micromax[ _\-]?)+([A-Za-z0-9]+)'
      regex_flag: 'i'
      device: 'Micromax $1'
      brand: 'Micromax'
      model: '$1'
      device: 'smartphone'
    # be carefull here with Acer e.g. A500
    - regex: '; *(A\d{2}|A[12]\d{2}|A90S|A110Q) Build'
      regex_flag: 'i'
      device: 'Micromax $1'
      brand: 'Micromax'
      model: '$1'
      device: 'smartphone'
    - regex: '; *(P\d{3}|P\d{3})(?:\(Funbook\))? Build'
      regex_flag: 'i'
      device: 'Micromax $1'
      brand: 'Micromax'
      model: '$1'
      device: 'tablet'

    #########
    # Mito
    # @ref: http://new.mitomobile.com/
    #########
    - regex: '; *(MITO)[ _\-]?([^;/]+) Build'
      regex_flag: 'i'
      device: '$1 $2'
      brand: 'Mito'
      model: '$2'

    #########
    # Mobistel
    # @ref: http://www.mobistel.com/
    #########
    - regex: '; *(Cynus)[ _](F5|T\d|(?:(?!Build|[;/\)]).)+) *(?:Build|[;/\)])'
      regex_flag: 'i'
      device: '$1 $2'
      brand: 'Mobistel'
      model: '$1 $2'

    #########
    # Modecom
    # @ref: http://www.modecom.eu/tablets/portal/
    #########
    - regex: '; *(MODECOM )?(FreeTab) ?([^;/]+) Build'
      regex_flag: 'i'
      device: '$1$2 $3'
      brand: 'Modecom'
      model: '$2 $3'
    - regex: '; *(MODECOM )([^;/]+) Build'
      regex_flag: 'i'
      device: '$1 $2'
      brand: 'Modecom'
      model: '$2'

    #########
    # Motorola
    # @ref: http://www.motorola.com/us/shop-all-mobile-phones/
    #########
    - regex: '; *(MZ\d{3}\+?|MZ\d{3} 4G|Xoom|XOOM[^;/]*) Build'
      device: '$1'
      brand: 'Motorola'
      model: '$1'
    - regex: '; *(Milestone )(XT[^;/]*) Build'
      device: '$1$2'
      brand: 'Motorola'
      model: '$2'
    - regex: '; *(Motoroi ?x|Droid X|DROIDX) Build'
      regex_flag: 'i'
      device: '$1'
      brand: 'Motorola'
      model: 'DROID X'
    - regex: '; *(Droid[^;/]*|DROID[^;/]*|Milestone[^;/]*|Photon|Triumph|Devour|Titanium) Build'
      device: '$1'
      brand: 'Motorola'
      model: '$1'
    - regex: '; *(A555|A85[34][^;/]*|A95[356]|ME[58]\d{2}\+?|ME600|ME632|ME722|MB\d{3}\+?|MT680|MT710|MT870|MT887|MT917|WX435|WX453|WX44[25]|XT\d{3,4}[A-Z\+]*|CL[iI]Q|CL[iI]Q XT) Build'
      device: '$1'
      brand: 'Motorola'
      model: '$1'
    - regex: '; *(Motorola MOT-|Motorola[ _\-]|MOT\-?)([^;/]+) Build'
      device: '$1$2'
      brand: 'Motorola'
      model: '$2'
    - regex: '; *(Moto[_ ]?|MOT\-)([^;/]+) Build'
      device: '$1$2'
      brand: 'Motorola'
      model: '$2'

    #########
    # MpMan
    # @ref: http://www.mpmaneurope.com
    #########
    - regex: '; *((?:MP[DQ]C|MPG\d{1,4}|MP\d{3,4}|MID(?:(?:10[234]|114|43|7[247]|8[24]|7)C|8[01]1))[^;/]*) Build'
      device: '$1'
      brand: 'Mpman'
      model: '$1'

    #########
    # MSI
    # @ref: http://www.msi.com/product/windpad/
    #########
    - regex: '; *(?:MSI[ _])?(Primo\d+|Enjoy[ _\-][^;/]+) Build'
      regex_flag: 'i'
      device: '$1'
      brand: 'Msi'
      model: '$1'

    #########
    # Multilaser
    # http://www.multilaser.com.br/listagem_produtos.php?cat=5
    #########
    - regex: '; *Multilaser[ _]([^;/]+) Build'
      device: '$1'
      brand: 'Multilaser'
      model: '$1'

    #########
    # MyPhone
    # @ref: http://myphone.com.ph/
    #########
    - regex: '; *(My)[_]?(Pad)[ _]([^;/]+) Build'
      device: '$1$2 $3'
      brand: 'MyPhone'
      model: '$1$2 $3'
    - regex: '; *(My)\|?(Phone)[ _]([^;/]+) Build'
      device: '$1$2 $3'
      brand: 'MyPhone'
      model: '$3'
    - regex: '; *(A\d+)[ _](Duo)? Build'
      regex_flag: 'i'
      device: '$1 $2'
      brand: 'MyPhone'
      model: '$1 $2'

    #########
    # Mytab
    # @ref: http://www.mytab.eu/en/category/mytab-products/
    #########
    - regex: '; *(myTab[^;/]*) Build'
      device: '$1'
      brand: 'Mytab'
      model: '$1'

    #########
    # Nabi
    # @ref: https://www.nabitablet.com
    #########
    - regex: '; *(NABI2?-)([^;/]+) Build/'
      device: '$1$2'
      brand: 'Nabi'
      model: '$2'

    #########
    # Nec Medias
    # @ref: http://www.n-keitai.com/
    #########
    - regex: '; *(N-\d+[CDE]) Build/'
      device: '$1'
      brand: 'Nec'
      model: '$1'
    - regex: '; ?(NEC-)(.*) Build/'
      device: '$1$2'
      brand: 'Nec'
      model: '$2'
    - regex: '; *(LT-NA7) Build/'
      device: '$1'
      brand: 'Nec'
      model: 'Lifetouch Note'

    #########
    # Nextbook
    # @ref: http://nextbookusa.com
    #########
    - regex: '; *(NXM\d+[A-z0-9_]*|Next\d[A-z0-9_ \-]*|NEXT\d[A-z0-9_ \-]*|Nextbook [A-z0-9_ ]*|DATAM803HC|M805)(?: Build|[\);])'
      device: '$1'
      brand: 'Nextbook'
      model: '$1'

    #########
    # Nikon
    # @ref: http://imaging.nikon.com/lineup/coolpix/s/s800c/
    #########
    - regex: '; *(COOLPIX S800c) Build/'
      device: '$1'
      brand: 'Nikon'
      type: 'camera'

    #########
    # Nokia
    # @ref: http://www.nokia.com
    #########
    - regex: '; *(Nokia)([ _\-]*)([^;/]*) Build'
      regex_flag: 'i'
      device: '$1$2$3'
      brand: 'Nokia'
      model: '$3'

    #########
    # Nook
    # @ref:
    # TODO nook browser/1.0
    #########
    - regex: '; *(Nook ?|Barnes & Noble Nook |BN )([^;/]+) Build'
      device: '$1$2'
      brand: 'Nook'
      model: '$2'
    - regex: '; *(NOOK )?(BN[TR]V\d+|LogicPD Zoom2) Build'
      device: '$1$2'
      brand: 'Nook'
      model: '$2'
    - regex: '; Build/(Nook)'
      device: '$1'
      brand: 'Nook'
      model: 'Tablet'

    #########
    # Olivetti
    # @ref: http://www.olivetti.de/EN/Page/t02/view_html?idp=348
    #########
    - regex: '; *(OP110|OliPad[^;/]+) Build'
      device: 'Olivetti $1'
      brand: 'Olivetti'
      model: '$1'

    #########
    # Omega
    # @ref: http://omega-technology.eu/en/produkty/346/tablets
    # @note: MID tablets might get matched by CobyKyros first
    # @models: (T107|MID(?:700[2-5]|7031|7108|7132|750[02]|8001|8500|9001|971[12])
    #########
    - regex: '; *OMEGA[ _\-](MID[^;/]+) Build'
      device: 'Omega $1'
      brand: 'Omega'
      model: '$1'
    - regex: '^(MID7500|MID\d+) Mozilla/5\.0 \(iPad;'
      device: 'Omega $1'
      brand: 'Omega'
      model: '$1'

    #########
    # OpenPeak
    # @ref: https://support.google.com/googleplay/answer/1727131?hl=en
    #########
    - regex: '; *((?:CIUS|cius)[^;/]*) Build'
      device: 'Openpeak $1'
      brand: 'Openpeak'
      model: '$1'

    #########
    # Oppo
    # @ref: http://en.oppo.com/products/
    #########
    - regex: '; *(Find ?(?:5|7a)|R8[012]\d{1,2}|T703\d{0,1}|U70\d{1,2}T?|X90\d{1,2}) Build'
      device: 'Oppo $1'
      brand: 'Oppo'
      model: '$1'
    - regex: '; *OPPO ?([^;/]+) Build/'
      device: 'Oppo $1'
      brand: 'Oppo'
      model: '$1'

    #########
    # Odys
    # @ref: http://odys.de
    #########
    - regex: '; *(?:Odys\-|ODYS\-|ODYS )([^;/]+) Build'
      device: 'Odys $1'
      brand: 'Odys'
      model: '$1'
    - regex: '; *(SELECT) ?(7) Build'
      device: 'Odys $1 $2'
      brand: 'Odys'
      model: '$1 $2'
    - regex: '; *(PEDI)_(PLUS)_(W) Build'
      device: 'Odys $1 $2 $3'
      brand: 'Odys'
      model: '$1 $2 $3'
    # Weltbild - Tablet PC 4 = Cat Phoenix = Odys Tablet PC 4?
    - regex: '; *(AEON|BRAVIO|FUSION|FUSION2IN1|Genio|EOS10|IEOS[^;/]*|IRON|Loox|LOOX|LOOX Plus|Motion|NOON|NOON_PRO|NEXT|OPOS|PEDI[^;/]*|PRIME[^;/]*|STUDYTAB|TABLO|Tablet-PC-4|UNO_X8|XELIO[^;/]*|Xelio ?\d+ ?[Pp]ro|XENO10|XPRESS PRO) Build'
      device: 'Odys $1'
      brand: 'Odys'
      model: '$1'

    #########
    # Orion
    # @ref: http://www.orion.ua/en/products/computer-products/tablet-pcs.html
    #########
    - regex: '; *(TP-\d+) Build/'
      device: 'Orion $1'
      brand: 'Orion'
      model: '$1'

    #########
    # PackardBell
    # @ref: http://www.packardbell.com/pb/en/AE/content/productgroup/tablets
    #########
    - regex: '; *(G100W?) Build/'
      device: 'PackardBell $1'
      brand: 'PackardBell'
      model: '$1'

    #########
    # Panasonic
    # @ref: http://panasonic.jp/mobile/
    # @models: T11, T21, T31, P11, P51, Eluga Power, Eluga DL1
    # @models: (tab) Toughpad FZ-A1, Toughpad JT-B1
    #########
    - regex: '; *(Panasonic)[_ ]([^;/]+) Build'
      device: '$1 $2'
      brand: '$1'
      model: '$2'
    # Toughpad
    - regex: '; *(FZ-A1B|JT-B1) Build'
      device: 'Panasonic $1'
      brand: 'Panasonic'
      model: '$1'
    # Eluga Power
    - regex: '; *(dL1|DL1) Build'
      device: 'Panasonic $1'
      brand: 'Panasonic'
      model: '$1'

    #########
    # Pantech
    # @href: http://www.pantech.co.kr/en/prod/prodList.do?gbrand=PANTECH
    # @href: http://www.pantech.co.kr/en/prod/prodList.do?gbrand=VEGA
    # @models: ADR8995, ADR910L, ADR930VW, C790, CDM8992, CDM8999, IS06, IS11PT, P2000, P2020, P2030, P4100, P5000, P6010, P6020, P6030, P7000, P7040, P8000, P8010, P9020, P9050, P9060, P9070, P9090, PT001, PT002, PT003, TXT8040, TXT8045, VEGA PTL21
    #########
    - regex: '; *(SKY[ _])?(IM\-[AT]\d{3}[^;/]+).* Build/'
      device: 'Pantech $1$2'
      brand: 'Pantech'
      model: '$1$2'
    - regex: '; *((?:ADR8995|ADR910L|ADR930L|ADR930VW|PTL21|P8000)(?: 4G)?) Build/'
      device: '$1'
      brand: 'Pantech'
      model: '$1'
    - regex: '; *Pantech([^;/]+).* Build/'
      device: 'Pantech $1'
      brand: 'Pantech'
      model: '$1'

    #########
    # Papayre
    # @ref: http://grammata.es/
    #########
    - regex: '; *(papyre)[ _\-]([^;/]+) Build/'
      regex_flag: 'i'
      device: '$1 $2'
      brand: 'Papyre'
      model: '$2'

    #########
    # Pearl
    # @ref: http://www.pearl.de/c-1540.shtml
    #########
    - regex: '; *(?:Touchlet )?(X10\.[^;/]+) Build/'
      device: 'Pearl $1'
      brand: 'Pearl'
      model: '$1'

    #########
    # Phicomm
    # @ref: http://www.phicomm.com.cn/
    #########
    - regex: '; PHICOMM (i800) Build/'
      device: 'Phicomm $1'
      brand: 'Phicomm'
      model: '$1'
    - regex: '; PHICOMM ([^;/]+) Build/'
      device: 'Phicomm $1'
      brand: 'Phicomm'
      model: '$1'
    - regex: '; *(FWS\d{3}[^;/]+) Build/'
      device: 'Phicomm $1'
      brand: 'Phicomm'
      model: '$1'

    #########
    # Philips
    # @ref: http://www.support.philips.com/support/catalog/products.jsp?_dyncharset=UTF-8&country=&categoryid=MOBILE_PHONES_SMART_SU_CN_CARE&userLanguage=en&navCount=2&groupId=PC_PRODUCTS_AND_PHONES_GR_CN_CARE&catalogType=&navAction=push&userCountry=cn&title=Smartphones&cateId=MOBILE_PHONES_CA_CN_CARE
    # @TODO: Philips Tablets User-Agents missing!
    # @ref: http://www.support.philips.com/support/catalog/products.jsp?_dyncharset=UTF-8&country=&categoryid=ENTERTAINMENT_TABLETS_SU_CN_CARE&userLanguage=en&navCount=0&groupId=&catalogType=&navAction=push&userCountry=cn&title=Entertainment+Tablets&cateId=TABLETS_CA_CN_CARE
    #########
    # @note: this a best guess according to available philips models. Need more User-Agents
    - regex: '; *(D633|D822|D833|T539|T939|V726|W335|W336|W337|W3568|W536|W5510|W626|W632|W6350|W6360|W6500|W732|W736|W737|W7376|W820|W832|W8355|W8500|W8510|W930) Build'
      device: '$1'
      brand: 'Philips'
      model: '$1'
    - regex: '; *(?:Philips|PHILIPS)[ _]([^;/]+) Build'
      device: 'Philips $1'
      brand: 'Philips'
      model: '$1'

    #########
    # Pipo
    # @ref: http://www.pipo.cn/En/
    #########
    - regex: 'Android 4\..*; *(M[12356789]|U[12368]|S[123])\ ?(pro)? Build'
      device: 'Pipo $1$2'
      brand: 'Pipo'
      model: '$1$2'

    #########
    # Ployer
    # @ref: http://en.ployer.cn/
    #########
    - regex: '; *(MOMO[^;/]+) Build'
      device: '$1'
      brand: 'Ployer'
      model: '$1'

    #########
    # Polaroid/ Acho
    # @ref: http://polaroidstore.com/store/start.asp?category_id=382&category_id2=0&order=title&filter1=&filter2=&filter3=&view=all
    #########
    - regex: '; *(?:Polaroid[ _])?((?:MIDC\d{3,}|PMID\d{2,}|PTAB\d{3,})[^;/]*)(\/[^;/]*)? Build/'
      device: '$1'
      brand: 'Polaroid'
      model: '$1'
    - regex: '; *(?:Polaroid )(Tablet) Build/'
      device: '$1'
      brand: 'Polaroid'
      model: '$1'

    #########
    # Pomp
    # @ref: http://pompmobileshop.com/
    #########
    - regex: '; *(POMP)[ _\-]((?:(?!Build|[;/\)]).)+) *(?:Build|[;/\)])'
      device: '$1 $2'
      brand: 'Pomp'
      model: '$2'

    #########
    # Positivo
    # @ref: http://www.positivoinformatica.com.br/www/pessoal/tablet-ypy/
    #########
    - regex: '; *(TB07STA|TB10STA|TB07FTA|TB10FTA) Build/'
      device: '$1'
      brand: 'Positivo'
      model: '$1'
    - regex: '; *(?:Positivo )?((?:YPY|Ypy)[^;/]+) Build/'
      device: '$1'
      brand: 'Positivo'
      model: '$1'

    #########
    # POV
    # @ref: http://www.pointofview-online.com/default2.php
    # @TODO: Smartphone Models MOB-3515, MOB-5045-B missing
    #########
    - regex: '; *(MOB-[^;/]+) Build/'
      device: '$1'
      brand: 'POV'
      model: '$1'
    - regex: '; *POV[ _\-]([^;/]+) Build/'
      device: 'POV $1'
      brand: 'POV'
      model: '$1'
    - regex: '; *((?:TAB-PLAYTAB|TAB-PROTAB|PROTAB|PlayTabPro|Mobii[ _\-]|TAB-P)[^;/]*) Build/'
      device: 'POV $1'
      brand: 'POV'
      model: '$1'

    #########
    # Prestigio
    # @ref: http://www.prestigio.com/catalogue/MultiPhones
    # @ref: http://www.prestigio.com/catalogue/MultiPads
    #########
    - regex: '; *(?:Prestigio )?((?:PAP|PMP)\d[^;/]+) Build/'
      device: 'Prestigio $1 $2'
      brand: 'Prestigio'
      model: '$1 $2'

    #########
    # Proscan
    # @ref: http://www.proscanvideo.com/products-search.asp?itemClass=TABLET&itemnmbr=
    #########
    - regex: '; *(PLT[0-9]{4}.*) Build/'
      device: '$1'
      brand: 'Proscan'
      model: '$1'

    #########
    # QMobile
    # @ref: http://www.qmobile.com.pk/
    #########
    - regex: '; *(A2|A5|A8|A900)_?(Classic)? Build'
      device: '$1 $2'
      brand: 'Qmobile'
      model: '$1 $2'
    - regex: '; *(Q[Mm]obile)_([^_]+)_([^_]+) Build'
      device: 'Qmobile $2 $3'
      brand: 'Qmobile'
      model: '$2 $3'
    - regex: '; *(Q\-?[Mm]obile)[_ ](A[^;/]+) Build'
      device: 'Qmobile $2'
      brand: 'Qmobile'
      model: '$2'

    #########
    # Qmobilevn
    # @ref: http://qmobile.vn/san-pham.html
    #########
    - regex: '; *(Q\-Smart)[ _]([^;/]+) Build/'
      device: '$1 $2'
      brand: 'Qmobilevn'
      model: '$2'
    - regex: '; *(Q\-?[Mm]obile)[ _\-](S[^;/]+) Build/'
      device: '$1 $2'
      brand: 'Qmobilevn'
      model: '$2'

    #########
    # Quanta
    # @ref: ?
    #########
    - regex: '; *(TA1013) Build'
      device: '$1'
      brand: 'Quanta'
      model: '$1'

    #########
    # Rockchip
    # @ref: http://www.rock-chips.com/a/cn/product/index.html
    # @note: manufacturer sells chipsets - I assume that these UAs are dev-boards
    #########
    - regex: '; *(RK\d+),? Build/'
      device: '$1'
      brand: 'Rockchip'
      model: '$1'
    - regex: ' Build/(RK\d+)'
      device: '$1'
      brand: 'Rockchip'
      model: '$1'

    #########
    # Sharp
    # @ref: http://www.sharp-phone.com/en/index.html
    # @ref: http://www.android.com/devices/?country=all&m=sharp
    #########
    - regex: '; *(SH\-?\d\d[^;/]+|SBM\d[^;/]+) Build'
      device: 'Sharp $1'
      brand: 'Sharp'
      model: '$1'
    - regex: '; *(SHARP[ -])([^;/]+) Build'
      device: '$1$2'
      brand: 'Sharp'
      model: '$2'

    #########
    # Simvalley
    # @ref: http://www.simvalley-mobile.de/
    #########
    - regex: '; *(SPX[_\-]\d[^;/]*) Build/'
      device: '$1'
      brand: 'Simvalley'
      model: '$1'
    - regex: '; *(SX7\-PEARL\.GmbH) Build/'
      device: '$1'
      brand: 'Simvalley'
      model: '$1'
    - regex: '; *(SP[T]?\-\d{2}[^;/]*) Build/'
      device: '$1'
      brand: 'Simvalley'
      model: '$1'

    #########
    # SK Telesys
    # @ref: http://www.sk-w.com/phone/phone_list.jsp
    # @ref: http://www.android.com/devices/?country=all&m=sk-telesys
    #########
    - regex: '; *(SK\-.*) Build/'
      device: '$1'
      brand: 'SKtelesys'
      model: '$1'

    #########
    # Skytex
    # @ref: http://skytex.com/android
    #########
    - regex: '; *(?:SKYTEX|SX)-([^;/]+) Build'
      device: '$1'
      brand: 'Skytex'
      model: '$1'
    - regex: '; *(IMAGINE [^;/]+) Build'
      device: '$1'
      brand: 'Skytex'
      model: '$1'

    #########
    # SmartQ
    # @ref: http://en.smartdevices.com.cn/Products/
    # @models: Z8, X7, U7H, U7, T30, T20, Ten3, V5-II, T7-3G, SmartQ5, K7, S7, Q8, T19, Ten2, Ten, R10, T7, R7, V5, V7, SmartQ7
    #########
    - regex: '; *(SmartQ) ?([^;/]+) Build/'
      device: '$1 $2'
      brand: '$1'
      model: '$2'

    #########
    # Smartbitt
    # @ref: http://www.smartbitt.com/
    # @missing: SBT Useragents
    #########
    - regex: '; *(WF7C|WF10C|SBT[^;/]+) Build'
      device: '$1'
      brand: 'Smartbitt'
      model: '$1'

    #########
    # Softbank (Operator Branded Devices)
    # @ref: http://www.ipentec.com/document/document.aspx?page=android-useragent
    #########
    - regex: '; *(SBM(?:003SH|005SH|006SH|007SH|102SH)) Build'
      device: '$1'
      brand: 'Sharp'
      model: '$1'
    - regex: '; *(003P|101P|101P11C|102P) Build'
      device: '$1'
      brand: 'Panasonic'
      model: '$1'
    - regex: '; *(00\dZ) Build/'
      device: '$1'
      brand: 'ZTE'
      model: '$1'
    - regex: '; HTC(X06HT) Build'
      device: '$1'
      brand: 'HTC'
      model: '$1'
    - regex: '; *(001HT|X06HT) Build'
      device: '$1'
      brand: 'HTC'
      model: '$1'
    - regex: '; *(201M) Build'
      device: '$1'
      brand: 'Motorola'
      model: 'XT902'

    #########
    # Trekstor
    # @ref: http://www.trekstor.co.uk/surftabs-en.html
    # @note: Must come before SonyEricsson
    #########
    - regex: '; *(ST\d{4}.*)Build/ST'
      device: 'Trekstor $1'
      brand: 'Trekstor'
      model: '$1'
    - regex: '; *(ST\d{4}.*) Build/'
      device: 'Trekstor $1'
      brand: 'Trekstor'
      model: '$1'

    #########
    # SonyEricsson
    # @note: Must come before nokia since they also use symbian
    # @ref: http://www.android.com/devices/?country=all&m=sony-ericssons
    # @TODO: type!
    #########
    # android matchers
    - regex: '; *(Sony ?Ericsson ?)([^;/]+) Build'
      device: '$1$2'
      brand: 'SonyEricsson'
      model: '$2'
    - regex: '; *((?:SK|ST|E|X|LT|MK|MT|WT)\d{2}[a-z0-9]*(?:-o)?|R800i|U20i) Build'
      device: '$1'
      brand: 'SonyEricsson'
      model: '$1'
    # TODO X\d+ is wrong
    - regex: '; *(Xperia (?:A8|Arc|Acro|Active|Live with Walkman|Mini|Neo|Play|Pro|Ray|X\d+)[^;/]*) Build'
      regex_flag: 'i'
      device: '$1'
      brand: 'SonyEricsson'
      model: '$1'

    #########
    # Sony
    # @ref: http://www.sonymobile.co.jp/index.html
    # @ref: http://www.sonymobile.com/global-en/products/phones/
    # @ref: http://www.sony.jp/tablet/
    #########
    - regex: '; Sony (Tablet[^;/]+) Build'
      device: 'Sony $1'
      brand: 'Sony'
      model: '$1'
    - regex: '; Sony ([^;/]+) Build'
      device: 'Sony $1'
      brand: 'Sony'
      model: '$1'
    - regex: '; *(Sony)([A-Za-z0-9\-]+) Build'
      device: '$1$2'
      brand: '$1'
      model: '$2'
    - regex: '; *(Xperia [^;/]+) Build'
      device: '$1'
      brand: 'Sony'
      model: '$1'
    - regex: '; *(C(?:1[0-9]|2[0-9]|53|55|6[0-9])[0-9]{2}|D[25]\d{3}|D6[56]\d{2}) Build'
      device: '$1'
      brand: 'Sony'
      model: '$1'
    - regex: '; *(SGP\d{3}|SGPT\d{2}) Build'
      device: '$1'
      brand: 'Sony'
      model: '$1'
    - regex: '; *(NW-Z1000Series) Build'
      device: '$1'
      brand: 'Sony'
      model: '$1'

    #########
    # Spice
    # @ref: http://www.spicemobilephones.co.in/
    #########
    - regex: '; *((?:CSL_Spice|Spice|SPICE|CSL)[ _\-]?)?([Mm][Ii])([ _\-])?(\d{3}[^;/]*) Build/'
      device: '$1$2$3$4'
      brand: 'Spice'
      model: 'Mi$4'

    #########
    # Sprint (Operator Branded Devices)
    # @ref:
    #########
    - regex: 'Sprint (ATP.*) Build'
      brand: 'HTC'
      type: 'tablet'
      model: '$1'
    - regex: 'Sprint (APA.*) Build'
      brand: 'HTC'
      model: '$1'
      type: 'smartphone'
    - regex: '; *(Sprint )((?:(?!Build|[;/]).)+) *(?:Build|[;/])'
      device: '$1$2'
      brand: 'Sprint'
      model: '$2'

    #########
    # Tagi
    # @ref: ??
    #########
    - regex: '; *(TAGI[ ]?)(MID) ?([^;/]+) Build/'
      device: '$1$2$3'
      brand: 'Tagi'
      model: '$2$3'

    #########
    # Tecmobile
    # @ref: http://www.tecmobile.com/
    #########
    - regex: '; *(Oyster500|Opal 800) Build'
      device: 'Tecmobile $1'
      brand: 'Tecmobile'
      model: '$1'

    #########
    # Tecno
    # @ref: www.tecno-mobile.com/‎
    #########
    - regex: '; *(TECNO[ _])([^;/]+) Build/'
      device: '$1$2'
      brand: 'Tecno'
      model: '$2'

    #########
    # Telechips, Techvision evaluation boards
    # @ref:
    #########
    - regex: '; *Android for (Telechips|Techvision) ([^ ]+) '
      regex_flag: 'i'
      device: '$1 $2'
      brand: '$1'
      model: '$2'

    #########
    # Telstra
    # @ref: http://www.telstra.com.au/home-phone/thub-2/
    # @ref: https://support.google.com/googleplay/answer/1727131?hl=en
    #########
    - regex: '; *(T-Hub2) Build/'
      device: '$1'
      brand: 'Telstra'
      model: '$1'

    #########
    # Terra
    # @ref: http://www.wortmann.de/
    #########
    - regex: '; *(PAD) ?(100[12]) Build/'
      device: 'Terra $1$2'
      brand: 'Terra'
      model: '$1$2'

    #########
    # Texet
    # @ref: http://www.texet.ru/tablet/
    #########
    - regex: '; *(T[BM]-\d{3}[^;/]+) Build/'
      device: '$1'
      brand: 'Texet'
      model: '$1'

    #########
    # TiPhone
    # @ref: ??
    #########
    - regex: '; *(TiPhone)[ \-]([^;/]+) Build/'
      device: '$1 $2'
      brand: 'TiPhone'
      model: '$2'
      type: 'smartphone'

    #########
    # Thalia
    # @ref: http://www.thalia.de/shop/tolino-shine-ereader/show/
    #########
    - regex: '; *(tolino [^;/]+) Build'
      device: '$1'
      brand: 'Thalia'
      model: '$1'
    - regex: '; *Build/.* (TOLINO_BROWSER)'
      device: '$1'
      brand: 'Thalia'
      model: 'Tolino Shine'

    #########
    # Thl
    # @ref: http://en.thl.com.cn/Mobile
    # @ref: http://thlmobilestore.com
    #########
    - regex: '; *(?:CJ[ -])?(ThL|THL)[ -]([^;/]+) Build/'
      device: '$1 $2'
      brand: 'Thl'
      model: '$2'
    - regex: '; *(T100|T200|T5|W100|W200|W8s) Build/'
      device: '$1'
      brand: 'Thl'
      model: '$1'

    #########
    # T-Mobile (Operator Branded Devices)
    #########
    # @ref: https://en.wikipedia.org/wiki/HTC_Hero
    - regex: '; *(T-Mobile[ _]G2[ _]Touch) Build'
      device: '$1'
      brand: 'HTC'
      model: 'Hero'
    # @ref: https://en.wikipedia.org/wiki/HTC_Desire_Z
    - regex: '; *(T-Mobile[ _]G2) Build'
      device: '$1'
      brand: 'HTC'
      model: 'Desire Z'
    - regex: '; *(T-Mobile myTouch Q) Build'
      device: '$1'
      brand: 'Huawei'
      model: 'U8730'
    - regex: '; *(T-Mobile myTouch) Build'
      device: '$1'
      brand: 'Huawei'
      model: 'U8680'
    - regex: '; *(T-Mobile_Espresso) Build'
      device: '$1'
      brand: 'HTC'
      model: 'Espresso'
    - regex: '; *(T-Mobile G1) Build'
      device: '$1'
      brand: 'HTC'
      model: 'Dream'
    - regex: '\b(T-Mobile ?)?(myTouch)[ _]?([34]G)[ _]?([^\/]*) (?:Mozilla|Build)'
      device: '$1$2 $3 $4'
      brand: 'HTC'
      model: '$2 $3 $4'
    - regex: '\b(T-Mobile)_([^_]+)_(.*) Build'
      device: '$1 $2 $3'
      brand: 'Tmobile'
      model: '$2 $3'
    - regex: '\b(T-Mobile)[_ ]?((?:(?!Build).)*)Build'
      device: '$1 $2'
      brand: 'Tmobile'
      model: '$2'

    #########
    # Tomtec
    # @ref: http://www.tom-tec.eu/pages/tablets.php
    #########
    - regex: ' (ATP[0-9]{4}) Build'
      device: '$1'
      brand: 'Tomtec'
      model: '$1'

    #########
    # Tooky
    # @ref: http://www.tookymobile.com/
    #########
    - regex: ' *(TOOKY)[ _\-]([^;/]+) ?(?:Build|;)'
      regex_flag: 'i'
      device: '$1 $2'
      brand: 'Tooky'
      model: '$2'

    #########
    # Toshiba
    # @ref: http://www.toshiba.co.jp/
    # @missing: LT170, Thrive 7, TOSHIBA STB10
    #########
    - regex: '\b(TOSHIBA_AC_AND_AZ|TOSHIBA_FOLIO_AND_A|FOLIO_AND_A)'
      device: '$1'
      brand: 'Toshiba'
      model: 'Folio 100'
    - regex: '; *([Ff]olio ?100) Build/'
      device: '$1'
      brand: 'Toshiba'
      model: 'Folio 100'
    - regex: '; *(AT[0-9]{2,3}(?:\-A|LE\-A|PE\-A|SE|a)?|AT7-A|AT1S0|Hikari-iFrame/WDPF-[^;/]+|THRiVE|Thrive) Build/'
      device: 'Toshiba $1'
      brand: 'Toshiba'
      model: '$1'

    #########
    # Touchmate
    # @ref: http://touchmatepc.com/new/
    #########
    - regex: '; *(TM-MID\d+[^;/]+|TOUCHMATE|MID-750) Build'
      device: '$1'
      brand: 'Touchmate'
      model: '$1'
    # @todo: needs verification user-agents missing
    - regex: '; *(TM-SM\d+[^;/]+) Build'
      device: '$1'
      brand: 'Touchmate'
      model: '$1'

    #########
    # Treq
    # @ref: http://www.treq.co.id/product
    #########
    - regex: '; *(A10 [Bb]asic2?) Build/'
      device: '$1'
      brand: 'Treq'
      model: '$1'
    - regex: '; *(TREQ[ _\-])([^;/]+) Build'
      regex_flag: 'i'
      device: '$1$2'
      brand: 'Treq'
      model: '$2'

    #########
    # Umeox
    # @ref: http://umeox.com/
    # @models: A936|A603|X-5|X-3
    #########
    # @todo: guessed markers
    - regex: '; *(X-?5|X-?3) Build/'
      device: '$1'
      brand: 'Umeox'
      model: '$1'
    # @todo: guessed markers
    - regex: '; *(A502\+?|A936|A603|X1|X2) Build/'
      device: '$1'
      brand: 'Umeox'
      model: '$1'

    #########
    # Versus
    # @ref: http://versusuk.com/support.html
    #########
    - regex: '(?:CnM)[ \-]((?:(?! Build).)+) Build/'
      regex_flag: 'i'
      device: 'CnM $1'
      brand: 'CnM'
      model: '$1'
      type: 'tablet'
    - regex: '(?:VS|Versus)[ \-]((?:(?! Build).)+) Build/'
      regex_flag: 'i'
      device: 'Versus $1'
      brand: 'Versus'
      model: '$1'
      type: 'tablet'

    #########
    # Vertu
    # @ref: http://www.vertu.com/
    #########
    - regex: '(VERTU) ([^;/]+) Build/'
      device: '$1 $2'
      brand: 'Vertu'
      model: '$2'

    #########
    # Videocon
    # @ref: http://www.videoconmobiles.com
    #########
    - regex: '; *(Videocon)[ _\-]([^;/]+) *(?:Build|;)'
      device: '$1 $2'
      brand: 'Videocon'
      model: '$2'
    - regex: ' (VT\d{2}[A-Za-z]*) Build'
      device: '$1'
      brand: 'Videocon'
      model: '$1'

    #########
    # Viewsonic
    # @ref: http://viewsonic.com
    #########
    - regex: '; *((?:ViewPad|ViewPhone|VSD)[^;/]+) Build/'
      device: '$1'
      brand: 'Viewsonic'
      model: '$1'
    - regex: '; *(ViewSonic-)([^;/]+) Build/'
      device: '$1$2'
      brand: 'Viewsonic'
      model: '$2'
    - regex: '; *(GTablet.*) Build/'
      device: '$1'
      brand: 'Viewsonic'
      model: '$1'

    #########
    # vivo (BBK COMMUNICATION TECHNOLOGY CO.LTD)
    # @ref: http://www.vivo.com.cn/
    #########
    - regex: '; *([Vv]ivo)[ _]([^;/]+) Build'
      device: '$1 $2'
      brand: 'vivo'
      model: '$2'

    #########
    # Vodafone (Operator Branded Devices)
    # @ref: ??
    #########
    - regex: '(Vodafone) (.*) Build/'
      device: '$1 $2'
      brand: '$1'
      model: '$2'

    #########
    # Walton
    # @ref: http://www.waltonbd.com/
    #########
    - regex: '; *(?:Walton[ _\-])?(Primo[ _\-][^;/]+) Build'
      regex_flag: 'i'
      device: 'Walton $1'
      brand: 'Walton'
      model: '$1'

    #########
    # Wiko
    # @ref: http://fr.wikomobile.com/collection.php?s=Smartphones
    #########
    - regex: '; *(?:WIKO[ \-])?(CINK\+?|BARRY|BLOOM|DARKFULL|DARKMOON|DARKNIGHT|DARKSIDE|FIZZ|HIGHWAY|IGGY|OZZY|RAINBOW|STAIRWAY|SUBLIM|WAX|CINK [^;/]+) Build/'
      regex_flag: 'i'
      device: 'Wiko $1'
      brand: 'Wiko'
      model: '$1'

    #########
    # WellcoM
    # @ref: ??
    #########
    - regex: '; *WellcoM-([^;/]+) Build'
      device: 'Wellcom $1'
      brand: 'Wellcom'
      model: '$1'

    ##########
    # WeTab
    # @ref: http://wetab.mobi/
    ##########
    - regex: '; ([Ww]e[Tt]ab[^;/]*?) *Build'
      device: '$1'
      brand: 'WeTab'
      model: '$1'

    #########
    # Wolfgang
    # @ref: http://wolfgangmobile.com/
    #########
    - regex: '; *(AT-AS[^;/]+) Build'
      device: 'Wolfgang $1'
      brand: 'Wolfgang'
      model: '$1'

    #########
    # Woxter
    # @ref: http://www.woxter.es/es-es/categories/index
    #########
    - regex: '; *(?:Woxter|Wxt) ([^;/]+) Build'
      device: 'Woxter $1'
      brand: 'Woxter'
      model: '$1'

    #########
    # Yarvik Zania
    # @ref: http://yarvik.com
    #########
    - regex: '; *(?:Xenta |Luna )?(TAB[234][0-9]{2}|TAB0[78]-\d{3}|TAB0?9-\d{3}|TAB1[03]-\d{3}|SMP\d{2}-\d{3}) Build/'
      device: 'Yarvik $1'
      brand: 'Yarvik'
      model: '$1'

    #########
    # Yifang
    # @note: Needs to be at the very last as manufacturer builds for other brands.
    # @ref: http://www.yifangdigital.com/
    # @models: M1010, M1011, M1007, M1008, M1005, M899, M899LP, M909, M8000,
    #   M8001, M8002, M8003, M849, M815, M816, M819, M805, M878, M780LPW,
    #   M778, M7000, M7000AD, M7000NBD, M7001, M7002, M7002KBD, M777, M767,
    #   M789, M799, M769, M757, M755, M753, M752, M739, M729, M723, M712, M727
    #########
    - regex: '; *([A-Z]{2,4})(M\d{3,}[A-Z]{2})([^;\)\/]*)(?: Build|[;\)])'
      device: 'Yifang $1$2$3'
      brand: 'Yifang'
      model: '$2'

    #########
    # XiaoMi
    # @ref: http://www.xiaomi.com/event/buyphone
    #########
    - regex: '; *(MI \d[^;/]*|MI-ONE Plus) Build/'
      device: 'XiaoMi $1'
      brand: 'XiaoMi'
      model: '$1'

    #########
    # Xolo
    # @ref: http://www.xolo.in/
    #########
    - regex: '; *XOLO[ _]([^;/]*tab.*) Build'
      regex_flag: 'i'
      device: 'Xolo $1'
      brand: 'Xolo'
      model: '$1'
    - regex: '; *XOLO[ _]([^;/]+) Build'
      regex_flag: 'i'
      device: 'Xolo $1'
      brand: 'Xolo'
      model: '$1'
    - regex: '; *(q\d0{2,3}[a-z]?) Build'
      regex_flag: 'i'
      device: 'Xolo $1'
      brand: 'Xolo'
      model: '$1'

    #########
    # Xoro
    # @ref: http://www.xoro.de/produkte/
    #########
    - regex: '; *(PAD ?[79]\d+[^;/]*|TelePAD\d+[^;/]) Build'
      device: 'Xoro $1'
      brand: 'Xoro'
      model: '$1'

    #########
    # Zopo
    # @ref: http://www.zopomobiles.com/products.html
    #########
    - regex: '; *(?:(?:ZOPO|Zopo)[ _]([^;/]+)|(ZP ?\d{2}[^;/]+)) Build'
      device: '$1$2'
      brand: 'Zopo'
      model: '$1$2'

    #########
    # ZiiLabs
    # @ref: http://www.ziilabs.com/products/platforms/androidreferencetablets.php
    #########
    - regex: '; *(ZiiLABS) (Zii[^;/]*) Build'
      device: '$1 $2'
      brand: 'ZiiLabs'
      model: '$2'
    - regex: '; *(Zii)_([^;/]*) Build'
      device: '$1 $2'
      brand: 'ZiiLabs'
      model: '$2'

    #########
    # ZTE
    # @ref: http://www.ztedevices.com/
    #########
    - regex: '; *(ARIZONA|(?:ATLAS|Atlas) W|D930|Grand (?:[SX][^;]*|Era|Memo[^;]*)|JOE|(?:Kis|KIS)\b[^;]*|Libra|Light [^;]*|N8[056][01]|N850L|N8000|N9[15]\d{2}|N9810|NX501|Optik|(?:Vip )Racer[^;]*|RacerII|RACERII|San Francisco[^;]*|V9[AC]|V55|V881|Z[679][0-9]{2}[A-z]?) Build'
      device: '$1'
      brand: 'ZTE'
      model: '$1'
    - regex: '; *([A-Z]\d+)_USA_[^;]* Build'
      device: '$1'
      brand: 'ZTE'
      model: '$1'
    - regex: '; *(SmartTab\d+)[^;]* Build'
      device: '$1'
      brand: 'ZTE'
      model: '$1'
    - regex: '; *(?:Blade|BLADE|ZTE-BLADE)([^;/]*) Build'
      device: 'ZTE Blade$1'
      brand: 'ZTE'
      model: 'Blade$1'
    - regex: '; *(?:Skate|SKATE|ZTE-SKATE)([^;/]*) Build'
      device: 'ZTE Skate$1'
      brand: 'ZTE'
      model: 'Skate$1'
    - regex: '; *(Orange |Optimus )(Monte Carlo|San Francisco) Build'
      device: '$1$2'
      brand: 'ZTE'
      model: '$1$2'
    - regex: '; *(?:ZXY-ZTE_|ZTE\-U |ZTE[\- ]|ZTE-C[_ ])([^;/]+) Build'
      device: 'ZTE $1'
      brand: 'ZTE'
      model: '$1'
    # operator specific
    - regex: '; (BASE) (lutea|Lutea 2|Tab[^;]*) Build'
      device: '$1 $2'
      brand: 'ZTE'
      model: '$1 $2'
    - regex: '; (Avea inTouch 2|soft stone|tmn smart a7|Movistar[ _]Link) Build'
      regex_flag: 'i'
      device: '$1'
      brand: 'ZTE'
      model: '$1'
    - regex: '; *(vp9plus)\)'
      device: '$1'
      brand: 'ZTE'
      model: '$1'

    ##########
    # Zync
    # @ref: http://www.zync.in/index.php/our-products/tablet-phablets
    ##########
    - regex: '; ?(Cloud[ _]Z5|z1000|Z99 2G|z99|z930|z999|z990|z909|Z919|z900) Build/'
      device: '$1'
      brand: 'Zync'
      model: '$1'

    ##########
    # Kindle
    # @note: Needs to be after Sony Playstation Vita as this UA contains Silk/3.2
    # @ref: https://developer.amazon.com/sdk/fire/specifications.html
    # @ref: http://amazonsilk.wordpress.com/useful-bits/silk-user-agent/
    ##########
    - regex: '; ?(Kindle Fire) Build\b'
      device: 'Kindle Fire'
      brand: 'Amazon'
      model: 'Kindle Fire'
    - regex: '; ?(KFOT|KFOTE|Amazon Kindle Fire2) Build\b'
      device: 'Kindle Fire 2'
      brand: 'Amazon'
      model: 'Kindle Fire 2'
    - regex: '; ?(KFTT) Build\b'
      device: 'Kindle Fire HD'
      brand: 'Amazon'
      model: 'Kindle Fire HD 7"'
    - regex: '; ?(KFJWI) Build\b'
      device: 'Kindle Fire HD 8.9" WiFi'
      brand: 'Amazon'
      model: 'Kindle Fire HD 8.9" WiFi'
    - regex: '; ?(KFJWA) Build\b'
      device: 'Kindle Fire HD 8.9" 4G'
      brand: 'Amazon'
      model: 'Kindle Fire HD 8.9" 4G'
    - regex: '; ?(KFSOWI) Build\b'
      device: 'Kindle Fire HD 7" WiFi'
      brand: 'Amazon'
      model: 'Kindle Fire HD 7" WiFi'
    - regex: '; ?(KFTHWI) Build\b'
      device: 'Kindle Fire HDX 7" WiFi'
      brand: 'Amazon'
      model: 'Kindle Fire HDX 7" WiFi'
    - regex: '; ?(KFTHWA) Build\b'
      device: 'Kindle Fire HDX 7" 4G'
      brand: 'Amazon'
      model: 'Kindle Fire HDX 7" 4G'
    - regex: '; ?(KFAPWI) Build\b'
      device: 'Kindle Fire HDX 8.9" WiFi'
      brand: 'Amazon'
      model: 'Kindle Fire HDX 8.9" WiFi'
    - regex: '; ?(KFAPWA) Build\b'
      device: 'Kindle Fire HDX 8.9" 4G'
      brand: 'Amazon'
      model: 'Kindle Fire HDX 8.9" 4G'
    - regex: '; ?(SD4930UR) Build\b'
      device: 'Fire Phone'
      brand: 'Amazon'
      model: 'Fire Phone'
    - regex: '; ?Amazon ([^;/]+) Build\b'
      device: '$1'
      brand: 'Amazon'
      model: '$1'
    - regex: '; ?(Kindle) Build\b'
      device: 'Kindle'
      brand: 'Amazon'
      model: 'Kindle'
    - regex: '; ?(Silk)/(\d+)\.(\d+)(?:\.([0-9\-]+))? Build\b'
      device: 'Kindle Fire'
      brand: 'Amazon'
      model: 'Kindle Fire$2'
    - regex: ' (Kindle)/(\d+\.\d+)'
      device: 'Kindle'
      brand: 'Amazon'
      model: '$1 $2'
    - regex: ' (Silk|Kindle)/(\d+)\.'
      device: 'Kindle'
      brand: 'Amazon'
      model: 'Kindle'

    #########
    # Devices from chinese manufacturer(s)
    # @note: identified by x-wap-profile http://218.249.47.94/Xianghe/.*
    #########
    - regex: '(sprd)\-([^/]+)/'
      device: '$1 $2'
      brand: '$1'
      model: '$2'
    # @ref: http://eshinechina.en.alibaba.com/
    - regex: '; *(H\d{2}00\+?) Build'
      device: '$1'
      brand: 'Hero'
      model: '$1'
    - regex: '; *(iphone|iPhone5) Build/'
      device: 'Xianghe $1'
      brand: 'Xianghe'
      model: '$1'
    - regex: '; *(e\d{4}[a-z]?_?v\d+|v89_[^;/]+)[^;/]+ Build/'
      device: 'Xianghe $1'
      brand: 'Xianghe'
      model: '$1'

    #########
    # Cellular
    # @ref:
    # @note: Operator branded devices
    #########
    - regex: '\bUSCCHTC[_\-]?([^ ;/\)]+)'
      device: '$1'
      brand: 'HTC'
      model: '$1'
    - regex: '\bUSCC[_\-]?([^ ;/\)]+)'
      device: '$1'
      brand: 'Cellular'
      model: '$1'

  ######################################################################
  # Windows Phone Parsers
  ######################################################################
  - group:
    regex: 'Windows Phone|WPDesktop'
    #########
    # Alcatel Windows Phones
    #########
    - regex: 'Windows Phone [^;]+; (?:(?!IEMobile/).)*IEMobile/[^;\)]+[;\)] ?(?:ARM; ?Touch; ?|Touch; ?)?(?:ALCATEL)[^;]*; *([^;,\)]+)'
      device: 'Alcatel $1'
      brand: 'Alcatel'
      model: '$1'

    #########
    # Asus Windows Phones
    #########
    - regex: 'Windows Phone [^;]+; (?:(?!IEMobile/).)*IEMobile/[^;\)]+[;\)] ?(?:ARM; ?Touch; ?|Touch; ?|WpsLondonTest; ?)?(?:ASUS|Asus)[^;]*; *([^;,\)]+)'
      device: 'Asus $1'
      brand: 'Asus'
      model: '$1'

    #########
    # Dell Windows Phones
    #########
    - regex: 'Windows Phone [^;]+; (?:(?!IEMobile/).)*IEMobile/[^;\)]+[;\)] ?(?:ARM; ?Touch; ?|Touch; ?)?(?:DELL|Dell)[^;]*; *([^;,\)]+)'
      device: 'Dell $1'
      brand: 'Dell'
      model: '$1'

    #########
    # HTC Windows Phones
    #########
    - regex: 'Windows Phone [^;]+; (?:(?!IEMobile/).)*IEMobile/[^;\)]+[;\)] ?(?:ARM; ?Touch; ?|Touch; ?|WpsLondonTest; ?)?(?:HTC|Htc|HTC_blocked[^;]*)[^;]*; *(?:HTC)?([^;,\)]+)'
      device: 'HTC $1'
      brand: 'HTC'
      model: '$1'

    #########
    # Huawei Windows Phones
    #########
    - regex: 'Windows Phone [^;]+; (?:(?!IEMobile/).)*IEMobile/[^;\)]+[;\)] ?(?:ARM; ?Touch; ?|Touch; ?)?(?:HUAWEI)[^;]*; *(?:HUAWEI )?([^;,\)]+)'
      device: 'Huawei $1'
      brand: 'Huawei'
      model: '$1'

    #########
    # LG Windows Phones
    #########
    - regex: 'Windows Phone [^;]+; (?:(?!IEMobile/).)*IEMobile/[^;\)]+[;\)] ?(?:ARM; ?Touch; ?|Touch; ?)?(?:LG|Lg)[^;]*; *(?:LG[ \-])?([^;,\)]+)'
      device: 'LG $1'
      brand: 'LG'
      model: '$1'

    #########
    # Noka Windows Phones
    #########
    - regex: 'Windows Phone [^;]+; (?:(?!IEMobile/).)*IEMobile/[^;\)]+[;\)] ?(?:ARM; ?Touch; ?|Touch; ?)?(?:NOKIA|Nokia)[^;]*; *(?:NOKIA ?|Nokia ?|LUMIA ?|[Ll]umia ?)*(\d{3,}[^;\)]*)'
      device: 'Lumia $1'
      brand: 'Nokia'
      model: 'Lumia $1'
    - regex: 'Windows Phone [^;]+; (?:(?!IEMobile/).)*IEMobile/[^;\)]+[;\)] ?(?:ARM; ?Touch; ?|Touch; ?)?(?:NOKIA|Nokia)[^;]*; *(RM-\d{3,})'
      device: 'Nokia $1'
      brand: 'Nokia'
      model: '$1'
    - regex: '(?:Windows Phone [^;]+; (?:(?!IEMobile/).)*IEMobile/[^;\)]+[;\)]|WPDesktop;) ?(?:ARM; ?Touch; ?|Touch; ?)?(?:NOKIA|Nokia)[^;]*; *(?:NOKIA ?|Nokia ?|LUMIA ?|[Ll]umia ?)*([^;\)]+)'
      device: 'Nokia $1'
      brand: 'Nokia'
      model: '$1'

    #########
    # Microsoft Windows Phones
    #########
    - regex: 'Windows Phone [^;]+; (?:(?!IEMobile/).)*IEMobile/[^;\)]+[;\)] ?(?:ARM; ?Touch; ?|Touch; ?)?(?:Microsoft(?: Corporation)?)[^;]*; *([^;,\)]+)'
      device: 'Microsoft $1'
      brand: 'Microsoft'
      model: '$1'

    #########
    # Samsung Windows Phones
    #########
    - regex: 'Windows Phone [^;]+; (?:(?!IEMobile/).)*IEMobile/[^;\)]+[;\)] ?(?:ARM; ?Touch; ?|Touch; ?|WpsLondonTest; ?)?(?:SAMSUNG)[^;]*; *(?:SAMSUNG )?([^;,\.\)]+)'
      device: 'Samsung $1'
      brand: 'Samsung'
      model: '$1'

    #########
    # Toshiba Windows Phones
    #########
    - regex: 'Windows Phone [^;]+; (?:(?!IEMobile/).)*IEMobile/[^;\)]+[;\)] ?(?:ARM; ?Touch; ?|Touch; ?|WpsLondonTest; ?)?(?:TOSHIBA|FujitsuToshibaMobileCommun)[^;]*; *([^;,\)]+)'
      device: 'Toshiba $1'
      brand: 'Toshiba'
      model: '$1'

    #########
    # Generic Windows Phones
    #########
    ## - regex: '\(compatible; MSIE [^;]+; Windows Phone [^;]+; Trident/[^;]+; ?(?:ARM; Touch; ?)?IEMobile/[^;]+; ?(?:ARM; ?Touch; ?|Touch; ?|WpsLondonTest; ?)?([^;]+); *([^;,\)]+)'
    - regex: 'Windows Phone [^;]+; (?:(?!IEMobile/).)*IEMobile/[^;\)]+[;\)] ?(?:ARM; ?Touch; ?|Touch; ?|WpsLondonTest; ?)?([^;]+); *([^;,\)]+)'
      device: '$1 $2'
      brand: '$1'
      model: '$2'

  ######################################################################
  # Other Devices Parser
  ######################################################################

  #########
  # Samsung Bada Phones
  #########
  - regex: '(?:^|; )SAMSUNG\-([A-Za-z0-9\-]+).* Bada/'
    device: 'Samsung $1'
    brand: 'Samsung'
    model: '$1'

  #########
  # Firefox OS
  #########
  - regex: '\(Mobile; ALCATEL ?(One|ONE) ?(Touch|TOUCH) ?([^;/]+)(?:/[^;]+)?; rv:[^\)]+\) Gecko/[^\/]+ Firefox/'
    device: 'Alcatel $1 $2 $3'
    brand: 'Alcatel'
    model: 'One Touch $3'
  - regex: '\(Mobile; (?:ZTE([^;]+)|(OpenC)); rv:[^\)]+\) Gecko/[^\/]+ Firefox/'
    device: 'ZTE $1$2'
    brand: 'ZTE'
    model: '$1$2'

  ##########
  # NOKIA
  # @note: NokiaN8-00 comes before iphone. Sometimes spoofs iphone
  ##########
  - group:
    regex: 'nokia|symbian|lumia'
    regex_flag: 'i'
    - regex: 'Nokia(N[0-9]+)([A-z_\-][A-z0-9_\-]*)'
      device: 'Nokia $1'
      brand: 'Nokia'
      model: '$1$2'
    - regex: '(?:Lumia|NOKIA; Nokia) ([A-Za-z0-9\-]+)'
      device: 'Lumia $1'
      brand: 'Nokia'
      model: 'Lumia $1'
    - regex: '(?:NOKIA|[Nn]okia)+(?:\-| *|; *)(?:([A-Za-z0-9]+)\-[0-9a-f]{32}|((?:(?!UCBrowser)[A-Za-z0-9\-])+))'
      device: 'Nokia $1$2'
      brand: 'Nokia'
      model: '$1$2'
    # UCWEB Browser on Symbian
    - regex: '\(Symbian; U; S60 V5; [A-z]{2}\-[A-z]{2}; (SonyEricsson|Samsung|Nokia|LG)([^;/]+)\)'
      device: '$1 $2'
      brand: '$1'
      model: '$2'
    # Nokia Symbian
    - regex: '\(Symbian(?:/3)?; U; ([^;]+);'
      device: 'Nokia $1'
      brand: 'Nokia'
      model: '$1'

  ##########
  # BlackBerry
  # @ref: http://www.useragentstring.com/pages/BlackBerry/
  ##########
  - group:
    regex: 'blackberry|rim|bb10;'
    regex_flag: 'i'
    - regex: 'BB10; ([A-Za-z0-9\- ]+)\)'
      device: 'BlackBerry $1'
      brand: 'BlackBerry'
      model: '$1'
      type: 'smartphone'
    - regex: 'Play[Bb]ook.+RIM Tablet OS'
      device: 'BlackBerry Playbook'
      brand: 'BlackBerry'
      model: 'Playbook'
      type: 'tablet'
    - regex: 'Black[Bb]erry *?([a-z0-9]+)'
      device: 'BlackBerry $1'
      brand: 'BlackBerry'
      model: '$1'
    - regex: 'Black[Bb]erry'
      device: 'BlackBerry $1'
      brand: 'BlackBerry'
      model: '$1'

  ##########
  # PALM / HP
  # @note: some palm devices must come before iphone. sometimes spoofs iphone in ua
  ##########
  - group:
    regex: '\b(Pre|Pixi|webOS|hpwOS|Palm|iPAQ|Treo|Tungsten|TouchPad|Xiino)'
    - regex: '(Pre|Pixi)/\d+\.\d+'
      device: 'Palm $1'
      brand: 'Palm'
      model: '$1'
      type: 'smartphone'
    - regex: 'Palm([0-9]+)'
      device: 'Palm $1'
      brand: 'Palm'
      model: '$1'
    - regex: '(Tungsten)'
      device: 'Palm $1'
      brand: 'Palm'
    - regex: '(Xiino)'
      device: 'Palm'
      brand: 'Palm'
      model: ' '
    - regex: 'Treo([A-Za-z0-9]+)'
      device: 'Palm Treo $1'
      brand: 'Palm'
      model: 'Treo $1'
    - regex: 'webOS.*(P160U(?:NA)?)/(\d+).(\d+)'
      device: 'HP Veer'
      brand: 'HP'
      model: 'Veer'
      type: 'tablet'
    - regex: '(Touch[Pp]ad)/\d+\.\d+'
      device: 'HP TouchPad'
      brand: 'HP'
      model: 'TouchPad'
      type: 'tablet'
    - regex: 'HPiPAQ([A-Za-z0-9]+)/\d+.\d+'
      device: 'HP iPAQ $1'
      brand: 'HP'
      model: 'iPAQ $1'
    - regex: 'PDA; (PalmOS)/sony/model ([a-z]+)/Revision'
      device: '$1'
      brand: 'Sony'
      model: '$1 $2'

  ##########
  # AppleTV
  # No built in browser that I can tell
  # Stack Overflow indicated iTunes-AppleTV/4.1 as a known UA for app available and I'm seeing it in live traffic
  ##########
  - regex: '(AppleTV)'
    device: 'AppleTV'
    brand: 'Apple'
    model: '$1'

  #########
  # Tesla Model S
  #########
  - regex: '(QtCarBrowser)'
    device: 'Tesla Model S'
    brand: 'Tesla'
    model: 'Model S'
    type: 'car'

  ##########
  # iSTUFF
  # @note: complete but probably catches spoofs
  #   ipad and ipod must be parsed before iphone
  #   cannot determine specific device type from ua string. (3g, 3gs, 4, etc)
  ##########
  - group:
    regex: 'iPhone|iPad|iPod|CFNetwork|Darwin'
    # @note: on some ua the device can be identified e.g. iPhone5,1
    - regex: '((?:iPhone|iPad|iPod)\d+,\d+)'
      device: '$1'
      brand: 'Apple'
      model: '$1'
    # @note: iPad needs to be before iPhone
    - regex: '(iPad)(?:;| Simulator;)'
      device: '$1'
      brand: 'Apple'
      model: '$1'
    - regex: '(iPod)(?:;| touch;| Simulator;)'
      device: '$1'
      brand: 'Apple'
      model: '$1'
    - regex: '(iPhone)(?:;| Simulator;)'
      device: '$1'
      brand: 'Apple'
      model: '$1'
    # @note: desktop applications show device info
    - regex: 'CFNetwork/.* Darwin/\d.*\(((?:Mac|iMac|PowerMac|PowerBook)[^\d]*)(\d+)(?:,|%2C)(\d+)'
      device: '$1$2,$3'
      brand: 'Apple'
      model: '$1$2,$3'
    # @note: iOS applications do not show device info
    - regex: 'CFNetwork/.* Darwin/\d'
      device: 'iOS-Device'
      brand: 'Apple'
      model: 'iOS-Device'

  ##########
  # Acer
  ##########
  - regex: 'acer_([A-Za-z0-9]+)_'
    device: 'Acer $1'
    brand: 'Acer'
    model: '$1'

  ##########
  # Alcatel
  ##########
  - regex: '(?:alcatel[ _\-])(?:(?:one[ _\-]?touch[ _\-]|ot[ \-]))((?:(?!UNTRUSTED|Linux|Firmware|AppleWebKit|Build|UCWEB|[;/\(\)_\-]).)+)'
    regex_flag: 'i'
    device: 'Alcatel One Touch $1'
    brand: 'Alcatel'
    model: 'One Touch $1'
  - regex: '(?:ALCATEL|Alcatel)-([A-Za-z0-9\-]+)'
    device: 'Alcatel $1'
    brand: 'Alcatel'
    model: '$1'

  ##########
  # Amoi
  ##########
  - regex: '(?:Amoisonic|Amoi)[_\- /]?([a-z0-9]+)'
    regex_flag: 'i'
    device: 'Amoi $1'
    brand: 'Amoi'
    model: '$1'

  #########
  # Garmin-Asus
  #########
  - regex: 'garmin-asus-([^/]+)'
    regex_flag: 'i'
    device: 'Garmin $1'
    brand: 'Garmin-Asus'
    model: '$1'

  ##########
  # Asus
  ##########
  - regex: '(?:asus ASUS|Asus|ASUS|asus)[\- ;]*((?:Transformer |Transformer Pad |Padfone |Nexus[ _])?[A-Za-z0-9]+)'
    device: 'Asus $1'
    brand: 'Asus'
    model: '$1'

  ##########
  # Bird
  ##########
  - regex: '\bBIRD[ \-\.]([A-Za-z0-9]+)'
    device: 'Bird $1'
    brand: 'Bird'
    model: '$1'

  ##########
  # Dell
  ##########
  - regex: '\bDell ([A-Za-z0-9]+)'
    device: 'Dell $1'
    brand: 'Dell'
    model: '$1'

  ##########
  # DoCoMo
  ##########
  - regex: 'DoCoMo/2\.0 ([A-Za-z0-9]+)'
    device: 'DoCoMo $1'
    brand: 'DoCoMo'
    model: '$1'
  - regex: '([A-Za-z0-9]+)_W\;FOMA'
    device: 'DoCoMo $1'
    brand: 'DoCoMo'
    model: '$1'
  - regex: '([A-Za-z0-9]+)\;FOMA'
    device: 'DoCoMo $1'
    brand: 'DoCoMo'
    model: '$1'

  ##########
  # htc
  ##########
  - regex: '\bHTC[ _\-]?((?:(?!-?Mozilla|fingerPrint|Opera|PROFILE|[;/\(\)]).)+)'
    regex_flag: 'i'
  #- regex: 'HTC(?:[ _\-]|; *)?(?:HTC *)?((?:(?!Mozilla|BMUNTRUSTED|Opera|PROFILE)[A-Za-z0-9 _\+])+)'
    device: 'HTC $1'
    brand: 'HTC'
    model: '$1'

  ##########
  # Huawei
  ##########
  - regex: 'Huawei([A-Za-z0-9]+)'
    device: 'Huawei $1'
    brand: 'Huawei'
    model: '$1'
  - regex: 'HUAWEI-([A-Za-z0-9]+)'
    device: 'Huawei $1'
    brand: 'Huawei'
    model: '$1'
  - regex: 'vodafone([A-Za-z0-9]+)'
    device: 'Huawei Vodafone $1'
    brand: 'Huawei'
    model: 'Vodafone $1'

  ##########
  # i-mate
  ##########
  - regex: 'i\-mate ([A-Za-z0-9]+)'
    device: 'i-mate $1'
    brand: 'i-mate'
    model: '$1'

  ##########
  # kyocera
  ##########
  - regex: 'Kyocera\-([A-Za-z0-9]+)'
    device: 'Kyocera $1'
    brand: 'Kyocera'
    model: '$1'
  - regex: 'KWC\-([A-Za-z0-9]+)'
    device: 'Kyocera $1'
    brand: 'Kyocera'
    model: '$1'

  ##########
  # lenovo
  ##########
  - regex: '\b(?:[Ll]enovo|LENOVO)+[ _\-]?([^,;:/ \)]+)'
    device: 'Lenovo $1'
    brand: 'Lenovo'
    model: '$1'

  ##########
  # HbbTV (European and Australian standard)
  # written before the LG regexes, as LG is making HbbTV too
  ##########
  - group:
    regex: 'HbbTV'
    - regex: '(HbbTV)/[0-9]+\.[0-9]+\.[0-9]+ \([^;]*; *(LG)E *; *([^;]*) *;[^;]*;[^;]*;\)'
      device: '$1'
      brand: '$2'
      model: '$3'
      type: 'tv'
    - regex: '(HbbTV)(?:/1\.1\.1)?(?: ?\(;;;;;\))?; *CE-HTML(?:/1\.\d)?; *([^ ]+) ([^;]+);'
      device: '$1'
      brand: '$2'
      model: '$3'
      type: 'tv'
    - regex: '(HbbTV)/1\.1\.1 \(;;;;;\) Maple_2011'
      device: '$1'
      brand: 'Samsung'
      type: 'tv'
    - regex: '(HbbTV)/[0-9]+\.[0-9]+\.[0-9]+ \([^;]*; *(?:CUS:([^;]*)|([^;]+)) *; *([^;]*) *;.*;'
      device: '$1'
      brand: '$2$3'
      model: '$4'
      type: 'tv'
    - regex: '(HbbTV)/[0-9]+\.[0-9]+\.[0-9]+'
      device: '$1'
      type: 'tv'

  ##########
  # LGE NetCast TV
  ##########
  - regex: 'LGE; (?:Media\/)?([^;]*);[^;]*;[^;]*;?\); "?LG NetCast(\.TV|\.Media|)-\d+'
    device: 'NetCast$2'
    brand: 'LG'
    model: '$1'
    type: 'tv'

  ##########
  # InettvBrowser, DirectFB, SmartTV
  ##########
  - group:
    regex: 'InettvBrowser|TSBNetTV|NETTV|HBBTV|DirectFB|SmartTV'
    - regex: 'InettvBrowser/[0-9]+\.[0-9A-Z]+ \([^;]*;(Sony)([^;]*);[^;]*;[^\)]*\)'
      device: 'Inettv'
      brand: '$1'
      model: '$2'
      type: 'tv'
    - regex: 'InettvBrowser/[0-9]+\.[0-9A-Z]+ \([^;]*;([^;]*);[^;]*;[^\)]*\)'
      device: 'Inettv'
      brand: 'Generic_Inettv'
      model: '$1'
      type: 'tv'
    - regex: '(SmartTV)'
      brand: 'Samsung'
      type: 'tv'
    - regex: '(InettvBrowser|TSBNetTV|NETTV|HBBTV|DirectFB)'
      device: 'Inettv'
      brand: 'Generic_Inettv'
      type: 'tv'

  ##########
  # lg
  ##########
  # LG Symbian Phones
  - group:
    regex: '\bLG'
    regex_flag: 'i'

    - regex: 'Series60/\d\.\d (LG)[\-]?([A-Za-z0-9 \-]+)'
      device: '$1 $2'
      brand: '$1'
      model: '$2'
    # other LG phones
    - regex: '; *(LG-)([A-Z]{1,2}\d{2,}(?:(?!Build| V\d+|[,;/\)\(]).)+)'
      device: '$1$2'
      brand: 'LG'
      model: '$2'
    - regex: '\b(?:LGE[ \-]LG\-(?:AX)?|LGE |LGE?-LG|LGE?[ \-]|LG[ /\-]|lg[\-])([A-Za-z0-9]+)\b'
      device: 'LG $1'
      brand: 'LG'
      model: '$1'
    - regex: '(?:^LG[\-]?|^LGE[\-/]?)([A-Za-z]+[0-9]+[A-Za-z]*)'
      device: 'LG $1'
      brand: 'LG'
      model: '$1'
    - regex: '^LG([0-9]+[A-Za-z]*)'
      device: 'LG $1'
      brand: 'LG'
      model: '$1'

  ##########
  # microsoft
  ##########
  - regex: '(KIN\.[^ ]+) (\d+)\.(\d+)'
    device: 'Microsoft $1'
    brand: 'Microsoft'
    model: '$1'
  - regex: '(?:MSIE|XBMC).*\b(Xbox)\b'
    device: '$1'
    brand: 'Microsoft'
    model: '$1'
  - regex: '; ARM; Trident/6\.0; Touch[\);]'
    device: 'Microsoft Surface RT'
    brand: 'Microsoft'
    model: 'Surface RT'

  ##########
  # motorola
  ##########
  - regex: 'Motorola\-([A-Za-z0-9]+)'
    device: 'Motorola $1'
    brand: 'Motorola'
    model: '$1'
  - regex: 'MOTO\-([A-Za-z0-9]+)'
    device: 'Motorola $1'
    brand: 'Motorola'
    model: '$1'
  - regex: 'MOT\-([A-z0-9][A-z0-9\-]*)'
    device: 'Motorola $1'
    brand: 'Motorola'
    model: '$1'

  ##########
  # nintendo
  ##########
  - regex: 'Nintendo WiiU'
    device: 'Nintendo Wii U'
    brand: 'Nintendo'
    model: 'Wii U'
  - regex: 'Nintendo (DS|3DS|DSi|Wii);'
    device: 'Nintendo $1'
    brand: 'Nintendo'
    model: '$1'

  ##########
  # pantech
  ##########
  - regex: '(?:Pantech|PANTECH)[ _-]?([A-Za-z0-9\-]+)'
    device: 'Pantech $1'
    brand: 'Pantech'
    model: '$1'

  ##########
  # philips
  ##########
  - regex: 'Philips([A-Za-z0-9]+)'
    device: 'Philips $1'
    brand: 'Philips'
    model: '$1'
  - regex: 'Philips ([A-Za-z0-9]+)'
    device: 'Philips $1'
    brand: 'Philips'
    model: '$1'

  #########
  # Sprint (Operator Branded Devices)
  # @ref:http://www.sprint.com
  #########
  - regex: '\b(Sprint)[: ]([^;,/ ]+)'
    device: '$1$2'
    brand: 'Sprint'
    model: '$2'

  ##########
  # Samsung
  ##########
  # Samsung Symbian Devices
  - regex: 'SymbianOS/9\.\d.* Samsung[/\-]([A-Za-z0-9 \-]+)'
    device: 'Samsung $1'
    brand: 'Samsung'
    model: '$1'
  - regex: '(Samsung)(SGH)(i[0-9]+)'
    device: '$1 $2$3'
    brand: '$1'
    model: '$2-$3'
  - regex: 'SAMSUNG-ANDROID-MMS/([^;/]+)'
    device: '$1'
    brand: 'Samsung'
    model: '$1'
  # Other Samsung
  #- regex: 'SAMSUNG(?:; |-)([A-Za-z0-9\-]+)'
  - regex: 'SAMSUNG(?:; |[ -/])([A-Za-z0-9\-]+)'
    regex_flag: 'i'
    device: 'Samsung $1'
    brand: 'Samsung'
    model: '$1'

  ##########
  # Sega
  ##########
  - regex: '(Dreamcast)'
    device: 'Sega $1'
    brand: 'Sega'
    model: '$1'

  ##########
  # Siemens mobile
  ##########
  - regex: '^SIE-([A-Za-z0-9]+)'
    device: 'Siemens $1'
    brand: 'Siemens'
    model: '$1'

  ##########
  # Softbank
  ##########
  - regex: 'Softbank/[12]\.0/([A-Za-z0-9]+)'
    device: 'Softbank $1'
    brand: 'Softbank'
    model: '$1'

  ##########
  # SonyEricsson
  ##########
  - regex: 'SonyEricsson([A-Za-z0-9]+)/'
    device: 'Ericsson $1'
    brand: 'SonyEricsson'
    model: '$1'


  ##########
  # Sony PlayStation
  # @ref: http://playstation.com
  # The Vita spoofs the Kindle
  ##########
  - regex: 'PlayStation (\d+)'
    regex_flag: 'i'
    device: 'PlayStation $1'
    brand: 'Sony'
    model: 'PlayStation $1'
    type: 'tv'
  - regex: '(PlayStation (?:Portable|Vita))'
    device: '$1'
    brand: 'Sony'
    model: '$1'
    type: 'console'

  ##########
  # Sony
  ##########
  - regex: 'Sony([^ ]+) '
    device: 'Sony $1'
    brand: 'Sony'
    model: '$1'

  ##########
  # Amazon
  ##########
  - regex: ' (Kindle)/(\d+\.\d+)'
    device: 'Kindle'
    brand: 'Amazon'
    model: '$1 $2'
  - regex: ' (Silk|Kindle)/(\d+)\.'
    device: 'Kindle'
    brand: 'Amazon'
    model: 'Kindle'

  ##########
  # WeTab
  # @ref: http://wetab.mobi/
  ##########
  - regex: '(WeTab)-Browser'
    device: '$1'
    brand: 'WeTab'
    model: '$1'

  #########
  # Android General Device Matching (far from perfect)
  #########
  - regex: 'Android[\- ][\d]+\.[\d]+; [A-Za-z]{2}\-[A-Za-z]{0,2}; WOWMobile (.+) Build'
    brand: 'Generic_Android'
    model: '$1'
  - regex: 'Android[\- ][\d]+\.[\d]+\-update1; [A-Za-z]{2}\-[A-Za-z]{0,2} *; *((?:(?!Build).)+) Build'
    brand: 'Generic_Android'
    model: '$1'
  - regex: 'Android[\- ][\d]+(?:\.[\d]+){1,2}; *[A-Za-z]{2}[_\-][A-Za-z]{0,2}\-? *; *((?:(?!Build).)+) Build'
    brand: 'Generic_Android'
    model: '$1'
  - regex: 'Android[\- ][\d]+(?:\.[\d]+){1,2}; *[A-Za-z]{0,2}\- *; *((?:(?!Build).)+) Build'
    brand: 'Generic_Android'
    model: '$1'
  # No build info at all - "Build" follows locale immediately
  - regex: 'Android[\- ][\d]+(?:\.[\d]+){1,2}; *[a-z]{0,2}[_\-]?[A-Za-z]{0,2};? Build'
    brand: 'Generic'
    model: 'Smartphone'
  - regex: 'Android[\- ][\d]+(?:\.[\d]+){1,2}; *\-?[A-Za-z]{2}; *((?:(?!Build).)+) Build'
    brand: 'Generic_Android'
    model: '$1'
  - regex: 'Android[\- ][\d]+(?:\.[\d]+){1,2}(?:;.*)?; *((?:(?! Build).)+) Build'
    brand: 'Generic_Android'
    model: '$1'

  ##########
  # Google TV
  ##########
  - regex: '(GoogleTV)'
    brand: 'Generic_Inettv'
    model: '$1'

  ##########
  # WebTV
  ##########
  - regex: '(WebTV)/\d+.\d+'
    brand: 'Generic_Inettv'
    model: '$1'

  ##########
  # Generic Tablet
  ##########
  - regex: '(Android 3\.\d|Opera Tablet|Tablet; .+Firefox/|Android.*(?:Tab|Pad))'
    regex_flag: 'i'
    device: 'Generic Tablet'
    brand: 'Generic'
    model: 'Tablet'

  ##########
  # Generic Smart Phone
  ##########
  - regex: '(Symbian|\bS60(Version|V\d)|\bS60\b|\((Series 60|Windows Mobile|Palm OS|Bada); Opera Mini|Windows CE|Opera Mobi|BREW|Brew|Mobile; .+Firefox/|iPhone OS|Android|MobileSafari|Windows *Phone|\(webOS/|PalmOS)'
    device: 'Generic Smartphone'
    brand: 'Generic'
    model: 'Smartphone'
  - regex: '(hiptop|avantgo|plucker|xiino|blazer|elaine)'
    regex_flag: 'i'
    device: 'Generic Smartphone'
    brand: 'Generic'
    model: 'Smartphone'

  ##########
  # Spiders (this is hack...)
  ##########
  - regex: '(bingbot|bot|borg|yahoo|slurp|^NING|MsnBot-Media|msnbot|msrbot|openbot|archiver|netresearch|lycos|scooter|altavista|teoma|Google.*/\+/web/snippet|gigabot|baiduspider|blitzbot|oegp|charlotte|furlbot|http%20client|polybot|htdig|ichiro|mogimogi|larbin|pompos|scrubby|searchsight|seekbot|semanticdiscovery|silk|snappy|speedy|spider|voila|^vortex|^voyager|zao|zeal|fast\-webcrawler|converacrawler|dataparksearch|findlinks|crawler|Netvibes|Sogou Pic Spider|ICC\-Crawler|Innovazion Crawler|Daumoa|EtaoSpider|A6\-Indexer|YisouSpider|Riddler)'
    regex_flag: 'i'
    device: 'Spider'
    brand: 'Spider'
    model: 'Desktop'

  ##########
  # Generic Feature Phone
  # take care to do case insensitive matching
  ##########
  - regex: '^(1207|3gso|4thp|501i|502i|503i|504i|505i|506i|6310|6590|770s|802s|a wa|acer|acs\-|airn|alav|asus|attw|au\-m|aur |aus |abac|acoo|aiko|alco|alca|amoi|anex|anny|anyw|aptu|arch|argo|bmobile|bell|bird|bw\-n|bw\-u|beck|benq|bilb|blac|c55/|cdm\-|chtm|capi|comp|cond|dall|dbte|dc\-s|dica|ds\-d|ds12|dait|devi|dmob|doco|dopo|dorado|el(?:38|39|48|49|50|55|58|68)|el[3456]\d{2}dual|erk0|esl8|ex300|ez40|ez60|ez70|ezos|ezze|elai|emul|eric|ezwa|fake|fly\-|fly_|g\-mo|g1 u|g560|gf\-5|grun|gene|go.w|good|grad|hcit|hd\-m|hd\-p|hd\-t|hei\-|hp i|hpip|hs\-c|htc |htc\-|htca|htcg)'
    regex_flag: 'i'
    device: 'Generic Feature Phone'
    brand: 'Generic'
    model: 'Feature Phone'
  - regex: '^(htcp|htcs|htct|htc_|haie|hita|huaw|hutc|i\-20|i\-go|i\-ma|i\-mobile|i230|iac|iac\-|iac/|ig01|im1k|inno|iris|jata|kddi|kgt|kgt/|kpt |kwc\-|klon|lexi|lg g|lg\-a|lg\-b|lg\-c|lg\-d|lg\-f|lg\-g|lg\-k|lg\-l|lg\-m|lg\-o|lg\-p|lg\-s|lg\-t|lg\-u|lg\-w|lg/k|lg/l|lg/u|lg50|lg54|lge\-|lge/|leno|m1\-w|m3ga|m50/|maui|mc01|mc21|mcca|medi|meri|mio8|mioa|mo01|mo02|mode|modo|mot |mot\-|mt50|mtp1|mtv |mate|maxo|merc|mits|mobi|motv|mozz|n100|n101|n102|n202|n203|n300|n302|n500|n502|n505|n700|n701|n710|nec\-|nem\-|newg|neon)'
    regex_flag: 'i'
    device: 'Generic Feature Phone'
    brand: 'Generic'
    model: 'Feature Phone'
  - regex: '^(netf|noki|nzph|o2 x|o2\-x|opwv|owg1|opti|oran|ot\-s|p800|pand|pg\-1|pg\-2|pg\-3|pg\-6|pg\-8|pg\-c|pg13|phil|pn\-2|pt\-g|palm|pana|pire|pock|pose|psio|qa\-a|qc\-2|qc\-3|qc\-5|qc\-7|qc07|qc12|qc21|qc32|qc60|qci\-|qwap|qtek|r380|r600|raks|rim9|rove|s55/|sage|sams|sc01|sch\-|scp\-|sdk/|se47|sec\-|sec0|sec1|semc|sgh\-|shar|sie\-|sk\-0|sl45|slid|smb3|smt5|sp01|sph\-|spv |spv\-|sy01|samm|sany|sava|scoo|send|siem|smar|smit|soft|sony|t\-mo|t218|t250|t600|t610|t618|tcl\-|tdg\-|telm|tim\-|ts70|tsm\-|tsm3|tsm5|tx\-9|tagt)'
    regex_flag: 'i'
    device: 'Generic Feature Phone'
    brand: 'Generic'
    model: 'Feature Phone'
  - regex: '^(talk|teli|topl|tosh|up.b|upg1|utst|v400|v750|veri|vk\-v|vk40|vk50|vk52|vk53|vm40|vx98|virg|vertu|vite|voda|vulc|w3c |w3c\-|wapj|wapp|wapu|wapm|wig |wapi|wapr|wapv|wapy|wapa|waps|wapt|winc|winw|wonu|x700|xda2|xdag|yas\-|your|zte\-|zeto|aste|audi|avan|blaz|brew|brvw|bumb|ccwa|cell|cldc|cmd\-|dang|eml2|fetc|hipt|http|ibro|idea|ikom|ipaq|jbro|jemu|jigs|keji|kyoc|kyok|libw|m\-cr|midp|mmef|moto|mwbp|mywa|newt|nok6|o2im|pant|pdxg|play|pluc|port|prox|rozo|sama|seri|smal|symb|treo|upsi|vx52|vx53|vx60|vx61|vx70|vx80|vx81|vx83|vx85|wap\-|webc|whit|wmlb|xda\-|xda_)'
    regex_flag: 'i'
    device: 'Generic Feature Phone'
    brand: 'Generic'
    model: 'Feature Phone'
  - regex: '^(Ice)$'
    device: 'Generic Feature Phone'
    brand: 'Generic'
    model: 'Feature Phone'
  - regex: '(wap[\-\ ]browser|maui|netfront|obigo|teleca|up\.browser|midp)'
    regex_flag: 'i'
    device: 'Generic Feature Phone'
    brand: 'Generic'
    model: 'Feature Phone'
